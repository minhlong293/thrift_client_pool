/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package longhm.dal.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-24")
public class GroupDB implements org.apache.thrift.TBase<GroupDB, GroupDB._Fields>, java.io.Serializable, Cloneable, Comparable<GroupDB> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupDB");

  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MUTEX_FIELD_DESC = new org.apache.thrift.protocol.TField("mutex", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SOURCE2_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("source2Priority", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupDBStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupDBTupleSchemeFactory());
  }

  public int groupId; // required
  public String groupName; // required
  public String desc; // required
  public boolean mutex; // required
  public Map<Integer,Integer> source2Priority; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ID((short)1, "groupId"),
    GROUP_NAME((short)2, "groupName"),
    DESC((short)3, "desc"),
    MUTEX((short)4, "mutex"),
    SOURCE2_PRIORITY((short)5, "source2Priority");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ID
          return GROUP_ID;
        case 2: // GROUP_NAME
          return GROUP_NAME;
        case 3: // DESC
          return DESC;
        case 4: // MUTEX
          return MUTEX;
        case 5: // SOURCE2_PRIORITY
          return SOURCE2_PRIORITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUPID_ISSET_ID = 0;
  private static final int __MUTEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MUTEX, new org.apache.thrift.meta_data.FieldMetaData("mutex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SOURCE2_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("source2Priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "int"), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "int"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupDB.class, metaDataMap);
  }

  public GroupDB() {
  }

  public GroupDB(
    int groupId,
    String groupName,
    String desc,
    boolean mutex,
    Map<Integer,Integer> source2Priority)
  {
    this();
    this.groupId = groupId;
    setGroupIdIsSet(true);
    this.groupName = groupName;
    this.desc = desc;
    this.mutex = mutex;
    setMutexIsSet(true);
    this.source2Priority = source2Priority;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupDB(GroupDB other) {
    __isset_bitfield = other.__isset_bitfield;
    this.groupId = other.groupId;
    if (other.isSetGroupName()) {
      this.groupName = other.groupName;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.mutex = other.mutex;
    if (other.isSetSource2Priority()) {
      Map<Integer,Integer> __this__source2Priority = new HashMap<Integer,Integer>(other.source2Priority.size());
      for (Map.Entry<Integer, Integer> other_element : other.source2Priority.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Integer other_element_value = other_element.getValue();

        Integer __this__source2Priority_copy_key = other_element_key;

        Integer __this__source2Priority_copy_value = other_element_value;

        __this__source2Priority.put(__this__source2Priority_copy_key, __this__source2Priority_copy_value);
      }
      this.source2Priority = __this__source2Priority;
    }
  }

  public GroupDB deepCopy() {
    return new GroupDB(this);
  }

  @Override
  public void clear() {
    setGroupIdIsSet(false);
    this.groupId = 0;
    this.groupName = null;
    this.desc = null;
    setMutexIsSet(false);
    this.mutex = false;
    this.source2Priority = null;
  }

  public int getGroupId() {
    return this.groupId;
  }

  public GroupDB setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public String getGroupName() {
    return this.groupName;
  }

  public GroupDB setGroupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  public void unsetGroupName() {
    this.groupName = null;
  }

  /** Returns true if field groupName is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupName() {
    return this.groupName != null;
  }

  public void setGroupNameIsSet(boolean value) {
    if (!value) {
      this.groupName = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public GroupDB setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public boolean isMutex() {
    return this.mutex;
  }

  public GroupDB setMutex(boolean mutex) {
    this.mutex = mutex;
    setMutexIsSet(true);
    return this;
  }

  public void unsetMutex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MUTEX_ISSET_ID);
  }

  /** Returns true if field mutex is set (has been assigned a value) and false otherwise */
  public boolean isSetMutex() {
    return EncodingUtils.testBit(__isset_bitfield, __MUTEX_ISSET_ID);
  }

  public void setMutexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MUTEX_ISSET_ID, value);
  }

  public int getSource2PrioritySize() {
    return (this.source2Priority == null) ? 0 : this.source2Priority.size();
  }

  public void putToSource2Priority(int key, int val) {
    if (this.source2Priority == null) {
      this.source2Priority = new HashMap<Integer,Integer>();
    }
    this.source2Priority.put(key, val);
  }

  public Map<Integer,Integer> getSource2Priority() {
    return this.source2Priority;
  }

  public GroupDB setSource2Priority(Map<Integer,Integer> source2Priority) {
    this.source2Priority = source2Priority;
    return this;
  }

  public void unsetSource2Priority() {
    this.source2Priority = null;
  }

  /** Returns true if field source2Priority is set (has been assigned a value) and false otherwise */
  public boolean isSetSource2Priority() {
    return this.source2Priority != null;
  }

  public void setSource2PriorityIsSet(boolean value) {
    if (!value) {
      this.source2Priority = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case GROUP_NAME:
      if (value == null) {
        unsetGroupName();
      } else {
        setGroupName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case MUTEX:
      if (value == null) {
        unsetMutex();
      } else {
        setMutex((Boolean)value);
      }
      break;

    case SOURCE2_PRIORITY:
      if (value == null) {
        unsetSource2Priority();
      } else {
        setSource2Priority((Map<Integer,Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ID:
      return getGroupId();

    case GROUP_NAME:
      return getGroupName();

    case DESC:
      return getDesc();

    case MUTEX:
      return isMutex();

    case SOURCE2_PRIORITY:
      return getSource2Priority();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ID:
      return isSetGroupId();
    case GROUP_NAME:
      return isSetGroupName();
    case DESC:
      return isSetDesc();
    case MUTEX:
      return isSetMutex();
    case SOURCE2_PRIORITY:
      return isSetSource2Priority();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupDB)
      return this.equals((GroupDB)that);
    return false;
  }

  public boolean equals(GroupDB that) {
    if (that == null)
      return false;

    boolean this_present_groupId = true;
    boolean that_present_groupId = true;
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_groupName = true && this.isSetGroupName();
    boolean that_present_groupName = true && that.isSetGroupName();
    if (this_present_groupName || that_present_groupName) {
      if (!(this_present_groupName && that_present_groupName))
        return false;
      if (!this.groupName.equals(that.groupName))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_mutex = true;
    boolean that_present_mutex = true;
    if (this_present_mutex || that_present_mutex) {
      if (!(this_present_mutex && that_present_mutex))
        return false;
      if (this.mutex != that.mutex)
        return false;
    }

    boolean this_present_source2Priority = true && this.isSetSource2Priority();
    boolean that_present_source2Priority = true && that.isSetSource2Priority();
    if (this_present_source2Priority || that_present_source2Priority) {
      if (!(this_present_source2Priority && that_present_source2Priority))
        return false;
      if (!this.source2Priority.equals(that.source2Priority))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_groupId = true;
    list.add(present_groupId);
    if (present_groupId)
      list.add(groupId);

    boolean present_groupName = true && (isSetGroupName());
    list.add(present_groupName);
    if (present_groupName)
      list.add(groupName);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_mutex = true;
    list.add(present_mutex);
    if (present_mutex)
      list.add(mutex);

    boolean present_source2Priority = true && (isSetSource2Priority());
    list.add(present_source2Priority);
    if (present_source2Priority)
      list.add(source2Priority);

    return list.hashCode();
  }

  @Override
  public int compareTo(GroupDB other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMutex()).compareTo(other.isSetMutex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMutex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutex, other.mutex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource2Priority()).compareTo(other.isSetSource2Priority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource2Priority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source2Priority, other.source2Priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupDB(");
    boolean first = true;

    sb.append("groupId:");
    sb.append(this.groupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupName:");
    if (this.groupName == null) {
      sb.append("null");
    } else {
      sb.append(this.groupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mutex:");
    sb.append(this.mutex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source2Priority:");
    if (this.source2Priority == null) {
      sb.append("null");
    } else {
      sb.append(this.source2Priority);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupDBStandardSchemeFactory implements SchemeFactory {
    public GroupDBStandardScheme getScheme() {
      return new GroupDBStandardScheme();
    }
  }

  private static class GroupDBStandardScheme extends StandardScheme<GroupDB> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupDB struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupName = iprot.readString();
              struct.setGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MUTEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.mutex = iprot.readBool();
              struct.setMutexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SOURCE2_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.source2Priority = new HashMap<Integer,Integer>(2*_map0.size);
                int _key1;
                int _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readI32();
                  _val2 = iprot.readI32();
                  struct.source2Priority.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setSource2PriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupDB struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.groupId);
      oprot.writeFieldEnd();
      if (struct.groupName != null) {
        oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
        oprot.writeString(struct.groupName);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MUTEX_FIELD_DESC);
      oprot.writeBool(struct.mutex);
      oprot.writeFieldEnd();
      if (struct.source2Priority != null) {
        oprot.writeFieldBegin(SOURCE2_PRIORITY_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.source2Priority.size()));
          for (Map.Entry<Integer, Integer> _iter4 : struct.source2Priority.entrySet())
          {
            oprot.writeI32(_iter4.getKey());
            oprot.writeI32(_iter4.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupDBTupleSchemeFactory implements SchemeFactory {
    public GroupDBTupleScheme getScheme() {
      return new GroupDBTupleScheme();
    }
  }

  private static class GroupDBTupleScheme extends TupleScheme<GroupDB> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupDB struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetGroupName()) {
        optionals.set(1);
      }
      if (struct.isSetDesc()) {
        optionals.set(2);
      }
      if (struct.isSetMutex()) {
        optionals.set(3);
      }
      if (struct.isSetSource2Priority()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetGroupName()) {
        oprot.writeString(struct.groupName);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetMutex()) {
        oprot.writeBool(struct.mutex);
      }
      if (struct.isSetSource2Priority()) {
        {
          oprot.writeI32(struct.source2Priority.size());
          for (Map.Entry<Integer, Integer> _iter5 : struct.source2Priority.entrySet())
          {
            oprot.writeI32(_iter5.getKey());
            oprot.writeI32(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupDB struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupName = iprot.readString();
        struct.setGroupNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mutex = iprot.readBool();
        struct.setMutexIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.source2Priority = new HashMap<Integer,Integer>(2*_map6.size);
          int _key7;
          int _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readI32();
            _val8 = iprot.readI32();
            struct.source2Priority.put(_key7, _val8);
          }
        }
        struct.setSource2PriorityIsSet(true);
      }
    }
  }

}

