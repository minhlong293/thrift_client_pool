/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package longhm.dal.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-24")
public class SourceDB implements org.apache.thrift.TBase<SourceDB, SourceDB._Fields>, java.io.Serializable, Cloneable, Comparable<SourceDB> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceDB");

  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SourceDBStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SourceDBTupleSchemeFactory());
  }

  public int sourceId; // required
  public String sourceName; // required
  public String desc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_ID((short)1, "sourceId"),
    SOURCE_NAME((short)2, "sourceName"),
    DESC((short)3, "desc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_ID
          return SOURCE_ID;
        case 2: // SOURCE_NAME
          return SOURCE_NAME;
        case 3: // DESC
          return DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SOURCEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("sourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceDB.class, metaDataMap);
  }

  public SourceDB() {
  }

  public SourceDB(
    int sourceId,
    String sourceName,
    String desc)
  {
    this();
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    this.sourceName = sourceName;
    this.desc = desc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SourceDB(SourceDB other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sourceId = other.sourceId;
    if (other.isSetSourceName()) {
      this.sourceName = other.sourceName;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
  }

  public SourceDB deepCopy() {
    return new SourceDB(this);
  }

  @Override
  public void clear() {
    setSourceIdIsSet(false);
    this.sourceId = 0;
    this.sourceName = null;
    this.desc = null;
  }

  public int getSourceId() {
    return this.sourceId;
  }

  public SourceDB setSourceId(int sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    return this;
  }

  public void unsetSourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
  }

  public String getSourceName() {
    return this.sourceName;
  }

  public SourceDB setSourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  public void unsetSourceName() {
    this.sourceName = null;
  }

  /** Returns true if field sourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceName() {
    return this.sourceName != null;
  }

  public void setSourceNameIsSet(boolean value) {
    if (!value) {
      this.sourceName = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public SourceDB setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Integer)value);
      }
      break;

    case SOURCE_NAME:
      if (value == null) {
        unsetSourceName();
      } else {
        setSourceName((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_ID:
      return getSourceId();

    case SOURCE_NAME:
      return getSourceName();

    case DESC:
      return getDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_ID:
      return isSetSourceId();
    case SOURCE_NAME:
      return isSetSourceName();
    case DESC:
      return isSetDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SourceDB)
      return this.equals((SourceDB)that);
    return false;
  }

  public boolean equals(SourceDB that) {
    if (that == null)
      return false;

    boolean this_present_sourceId = true;
    boolean that_present_sourceId = true;
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_sourceName = true && this.isSetSourceName();
    boolean that_present_sourceName = true && that.isSetSourceName();
    if (this_present_sourceName || that_present_sourceName) {
      if (!(this_present_sourceName && that_present_sourceName))
        return false;
      if (!this.sourceName.equals(that.sourceName))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sourceId = true;
    list.add(present_sourceId);
    if (present_sourceId)
      list.add(sourceId);

    boolean present_sourceName = true && (isSetSourceName());
    list.add(present_sourceName);
    if (present_sourceName)
      list.add(sourceName);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    return list.hashCode();
  }

  @Override
  public int compareTo(SourceDB other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceName()).compareTo(other.isSetSourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceName, other.sourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SourceDB(");
    boolean first = true;

    sb.append("sourceId:");
    sb.append(this.sourceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceName:");
    if (this.sourceName == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SourceDBStandardSchemeFactory implements SchemeFactory {
    public SourceDBStandardScheme getScheme() {
      return new SourceDBStandardScheme();
    }
  }

  private static class SourceDBStandardScheme extends StandardScheme<SourceDB> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SourceDB struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceId = iprot.readI32();
              struct.setSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceName = iprot.readString();
              struct.setSourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SourceDB struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
      oprot.writeI32(struct.sourceId);
      oprot.writeFieldEnd();
      if (struct.sourceName != null) {
        oprot.writeFieldBegin(SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.sourceName);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SourceDBTupleSchemeFactory implements SchemeFactory {
    public SourceDBTupleScheme getScheme() {
      return new SourceDBTupleScheme();
    }
  }

  private static class SourceDBTupleScheme extends TupleScheme<SourceDB> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SourceDB struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSourceId()) {
        optionals.set(0);
      }
      if (struct.isSetSourceName()) {
        optionals.set(1);
      }
      if (struct.isSetDesc()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSourceId()) {
        oprot.writeI32(struct.sourceId);
      }
      if (struct.isSetSourceName()) {
        oprot.writeString(struct.sourceName);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SourceDB struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sourceId = iprot.readI32();
        struct.setSourceIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceName = iprot.readString();
        struct.setSourceNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
    }
  }

}

