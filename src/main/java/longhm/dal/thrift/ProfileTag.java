/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package longhm.dal.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-24")
public class ProfileTag implements org.apache.thrift.TBase<ProfileTag, ProfileTag._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileTag> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileTag");

  private static final org.apache.thrift.protocol.TField VISITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("visitorId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TAG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tagList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProfileTagStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProfileTagTupleSchemeFactory());
  }

  public String visitorId; // required
  public List<Tag> tagList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VISITOR_ID((short)1, "visitorId"),
    TAG_LIST((short)2, "tagList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VISITOR_ID
          return VISITOR_ID;
        case 2: // TAG_LIST
          return TAG_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VISITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("visitorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG_LIST, new org.apache.thrift.meta_data.FieldMetaData("tagList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Tag.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileTag.class, metaDataMap);
  }

  public ProfileTag() {
  }

  public ProfileTag(
    String visitorId,
    List<Tag> tagList)
  {
    this();
    this.visitorId = visitorId;
    this.tagList = tagList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileTag(ProfileTag other) {
    if (other.isSetVisitorId()) {
      this.visitorId = other.visitorId;
    }
    if (other.isSetTagList()) {
      List<Tag> __this__tagList = new ArrayList<Tag>(other.tagList.size());
      for (Tag other_element : other.tagList) {
        __this__tagList.add(new Tag(other_element));
      }
      this.tagList = __this__tagList;
    }
  }

  public ProfileTag deepCopy() {
    return new ProfileTag(this);
  }

  @Override
  public void clear() {
    this.visitorId = null;
    this.tagList = null;
  }

  public String getVisitorId() {
    return this.visitorId;
  }

  public ProfileTag setVisitorId(String visitorId) {
    this.visitorId = visitorId;
    return this;
  }

  public void unsetVisitorId() {
    this.visitorId = null;
  }

  /** Returns true if field visitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitorId() {
    return this.visitorId != null;
  }

  public void setVisitorIdIsSet(boolean value) {
    if (!value) {
      this.visitorId = null;
    }
  }

  public int getTagListSize() {
    return (this.tagList == null) ? 0 : this.tagList.size();
  }

  public java.util.Iterator<Tag> getTagListIterator() {
    return (this.tagList == null) ? null : this.tagList.iterator();
  }

  public void addToTagList(Tag elem) {
    if (this.tagList == null) {
      this.tagList = new ArrayList<Tag>();
    }
    this.tagList.add(elem);
  }

  public List<Tag> getTagList() {
    return this.tagList;
  }

  public ProfileTag setTagList(List<Tag> tagList) {
    this.tagList = tagList;
    return this;
  }

  public void unsetTagList() {
    this.tagList = null;
  }

  /** Returns true if field tagList is set (has been assigned a value) and false otherwise */
  public boolean isSetTagList() {
    return this.tagList != null;
  }

  public void setTagListIsSet(boolean value) {
    if (!value) {
      this.tagList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VISITOR_ID:
      if (value == null) {
        unsetVisitorId();
      } else {
        setVisitorId((String)value);
      }
      break;

    case TAG_LIST:
      if (value == null) {
        unsetTagList();
      } else {
        setTagList((List<Tag>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VISITOR_ID:
      return getVisitorId();

    case TAG_LIST:
      return getTagList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VISITOR_ID:
      return isSetVisitorId();
    case TAG_LIST:
      return isSetTagList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileTag)
      return this.equals((ProfileTag)that);
    return false;
  }

  public boolean equals(ProfileTag that) {
    if (that == null)
      return false;

    boolean this_present_visitorId = true && this.isSetVisitorId();
    boolean that_present_visitorId = true && that.isSetVisitorId();
    if (this_present_visitorId || that_present_visitorId) {
      if (!(this_present_visitorId && that_present_visitorId))
        return false;
      if (!this.visitorId.equals(that.visitorId))
        return false;
    }

    boolean this_present_tagList = true && this.isSetTagList();
    boolean that_present_tagList = true && that.isSetTagList();
    if (this_present_tagList || that_present_tagList) {
      if (!(this_present_tagList && that_present_tagList))
        return false;
      if (!this.tagList.equals(that.tagList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_visitorId = true && (isSetVisitorId());
    list.add(present_visitorId);
    if (present_visitorId)
      list.add(visitorId);

    boolean present_tagList = true && (isSetTagList());
    list.add(present_tagList);
    if (present_tagList)
      list.add(tagList);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProfileTag other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVisitorId()).compareTo(other.isSetVisitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitorId, other.visitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagList()).compareTo(other.isSetTagList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagList, other.tagList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileTag(");
    boolean first = true;

    sb.append("visitorId:");
    if (this.visitorId == null) {
      sb.append("null");
    } else {
      sb.append(this.visitorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagList:");
    if (this.tagList == null) {
      sb.append("null");
    } else {
      sb.append(this.tagList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileTagStandardSchemeFactory implements SchemeFactory {
    public ProfileTagStandardScheme getScheme() {
      return new ProfileTagStandardScheme();
    }
  }

  private static class ProfileTagStandardScheme extends StandardScheme<ProfileTag> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileTag struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VISITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.visitorId = iprot.readString();
              struct.setVisitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TAG_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.tagList = new ArrayList<Tag>(_list36.size);
                Tag _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new Tag();
                  _elem37.read(iprot);
                  struct.tagList.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setTagListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileTag struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.visitorId != null) {
        oprot.writeFieldBegin(VISITOR_ID_FIELD_DESC);
        oprot.writeString(struct.visitorId);
        oprot.writeFieldEnd();
      }
      if (struct.tagList != null) {
        oprot.writeFieldBegin(TAG_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tagList.size()));
          for (Tag _iter39 : struct.tagList)
          {
            _iter39.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileTagTupleSchemeFactory implements SchemeFactory {
    public ProfileTagTupleScheme getScheme() {
      return new ProfileTagTupleScheme();
    }
  }

  private static class ProfileTagTupleScheme extends TupleScheme<ProfileTag> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileTag struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVisitorId()) {
        optionals.set(0);
      }
      if (struct.isSetTagList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVisitorId()) {
        oprot.writeString(struct.visitorId);
      }
      if (struct.isSetTagList()) {
        {
          oprot.writeI32(struct.tagList.size());
          for (Tag _iter40 : struct.tagList)
          {
            _iter40.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileTag struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.visitorId = iprot.readString();
        struct.setVisitorIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list41 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tagList = new ArrayList<Tag>(_list41.size);
          Tag _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new Tag();
            _elem42.read(iprot);
            struct.tagList.add(_elem42);
          }
        }
        struct.setTagListIsSet(true);
      }
    }
  }

}

