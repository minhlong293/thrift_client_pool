/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package longhm.dal.thrift;

import longhm.common.thrift.ReturnCode;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-24")
public class DMPDALService {

  public interface Iface {

    public void addProfileTag(ProfileTag profileTag) throws org.apache.thrift.TException;

    public void addMultiProfileTag(List<ProfileTag> profileTagList) throws org.apache.thrift.TException;

    public ProfileTagResult getProfileTag(String profileId) throws org.apache.thrift.TException;

    public MultiProfileTagsResult getMultiProfileTags(List<String> profileIdList) throws org.apache.thrift.TException;

    public void addProfileAttr(ProfileAttribute profileAttr) throws org.apache.thrift.TException;

    public void addMultiProfileAttrs(List<ProfileAttribute> profileAttrsList) throws org.apache.thrift.TException;

    public ProfileAttributeResult getProfileAttr(String profileId) throws org.apache.thrift.TException;

    public MultiProfileAttributeResult getMultiProfileAttrs(List<String> profileIdList) throws org.apache.thrift.TException;

    public ReturnCode addTag(TagDB tag) throws org.apache.thrift.TException;

    public ReturnCode addTagGroup(GroupDB tagGroup) throws org.apache.thrift.TException;

    public ReturnCode addSource(SourceDB source) throws org.apache.thrift.TException;

    public ReturnCode addAttribute(AttributeDB attribute) throws org.apache.thrift.TException;

    public MultiTagResult getMultiTags(List<Integer> tagIdList) throws org.apache.thrift.TException;

    public MultiGroupResult getMultiGroups(List<Integer> groupIdList) throws org.apache.thrift.TException;

    public MultiSourceResult getMultiSources(List<Integer> sourceIdList) throws org.apache.thrift.TException;

    public MultiAttributeResult getMultiAttributes(List<Integer> attrIdList) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addProfileTag(ProfileTag profileTag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMultiProfileTag(List<ProfileTag> profileTagList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileTag(String profileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMultiProfileTags(List<String> profileIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addProfileAttr(ProfileAttribute profileAttr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addMultiProfileAttrs(List<ProfileAttribute> profileAttrsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileAttr(String profileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMultiProfileAttrs(List<String> profileIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTag(TagDB tag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addTagGroup(GroupDB tagGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addSource(SourceDB source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addAttribute(AttributeDB attribute, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMultiTags(List<Integer> tagIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMultiGroups(List<Integer> groupIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMultiSources(List<Integer> sourceIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMultiAttributes(List<Integer> attrIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void addProfileTag(ProfileTag profileTag) throws org.apache.thrift.TException
    {
      send_addProfileTag(profileTag);
    }

    public void send_addProfileTag(ProfileTag profileTag) throws org.apache.thrift.TException
    {
      addProfileTag_args args = new addProfileTag_args();
      args.setProfileTag(profileTag);
      sendBaseOneway("addProfileTag", args);
    }

    public void addMultiProfileTag(List<ProfileTag> profileTagList) throws org.apache.thrift.TException
    {
      send_addMultiProfileTag(profileTagList);
    }

    public void send_addMultiProfileTag(List<ProfileTag> profileTagList) throws org.apache.thrift.TException
    {
      addMultiProfileTag_args args = new addMultiProfileTag_args();
      args.setProfileTagList(profileTagList);
      sendBaseOneway("addMultiProfileTag", args);
    }

    public ProfileTagResult getProfileTag(String profileId) throws org.apache.thrift.TException
    {
      send_getProfileTag(profileId);
      return recv_getProfileTag();
    }

    public void send_getProfileTag(String profileId) throws org.apache.thrift.TException
    {
      getProfileTag_args args = new getProfileTag_args();
      args.setProfileId(profileId);
      sendBase("getProfileTag", args);
    }

    public ProfileTagResult recv_getProfileTag() throws org.apache.thrift.TException
    {
      getProfileTag_result result = new getProfileTag_result();
      receiveBase(result, "getProfileTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileTag failed: unknown result");
    }

    public MultiProfileTagsResult getMultiProfileTags(List<String> profileIdList) throws org.apache.thrift.TException
    {
      send_getMultiProfileTags(profileIdList);
      return recv_getMultiProfileTags();
    }

    public void send_getMultiProfileTags(List<String> profileIdList) throws org.apache.thrift.TException
    {
      getMultiProfileTags_args args = new getMultiProfileTags_args();
      args.setProfileIdList(profileIdList);
      sendBase("getMultiProfileTags", args);
    }

    public MultiProfileTagsResult recv_getMultiProfileTags() throws org.apache.thrift.TException
    {
      getMultiProfileTags_result result = new getMultiProfileTags_result();
      receiveBase(result, "getMultiProfileTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiProfileTags failed: unknown result");
    }

    public void addProfileAttr(ProfileAttribute profileAttr) throws org.apache.thrift.TException
    {
      send_addProfileAttr(profileAttr);
    }

    public void send_addProfileAttr(ProfileAttribute profileAttr) throws org.apache.thrift.TException
    {
      addProfileAttr_args args = new addProfileAttr_args();
      args.setProfileAttr(profileAttr);
      sendBaseOneway("addProfileAttr", args);
    }

    public void addMultiProfileAttrs(List<ProfileAttribute> profileAttrsList) throws org.apache.thrift.TException
    {
      send_addMultiProfileAttrs(profileAttrsList);
    }

    public void send_addMultiProfileAttrs(List<ProfileAttribute> profileAttrsList) throws org.apache.thrift.TException
    {
      addMultiProfileAttrs_args args = new addMultiProfileAttrs_args();
      args.setProfileAttrsList(profileAttrsList);
      sendBaseOneway("addMultiProfileAttrs", args);
    }

    public ProfileAttributeResult getProfileAttr(String profileId) throws org.apache.thrift.TException
    {
      send_getProfileAttr(profileId);
      return recv_getProfileAttr();
    }

    public void send_getProfileAttr(String profileId) throws org.apache.thrift.TException
    {
      getProfileAttr_args args = new getProfileAttr_args();
      args.setProfileId(profileId);
      sendBase("getProfileAttr", args);
    }

    public ProfileAttributeResult recv_getProfileAttr() throws org.apache.thrift.TException
    {
      getProfileAttr_result result = new getProfileAttr_result();
      receiveBase(result, "getProfileAttr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileAttr failed: unknown result");
    }

    public MultiProfileAttributeResult getMultiProfileAttrs(List<String> profileIdList) throws org.apache.thrift.TException
    {
      send_getMultiProfileAttrs(profileIdList);
      return recv_getMultiProfileAttrs();
    }

    public void send_getMultiProfileAttrs(List<String> profileIdList) throws org.apache.thrift.TException
    {
      getMultiProfileAttrs_args args = new getMultiProfileAttrs_args();
      args.setProfileIdList(profileIdList);
      sendBase("getMultiProfileAttrs", args);
    }

    public MultiProfileAttributeResult recv_getMultiProfileAttrs() throws org.apache.thrift.TException
    {
      getMultiProfileAttrs_result result = new getMultiProfileAttrs_result();
      receiveBase(result, "getMultiProfileAttrs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiProfileAttrs failed: unknown result");
    }

    public ReturnCode addTag(TagDB tag) throws org.apache.thrift.TException
    {
      send_addTag(tag);
      return recv_addTag();
    }

    public void send_addTag(TagDB tag) throws org.apache.thrift.TException
    {
      addTag_args args = new addTag_args();
      args.setTag(tag);
      sendBase("addTag", args);
    }

    public ReturnCode recv_addTag() throws org.apache.thrift.TException
    {
      addTag_result result = new addTag_result();
      receiveBase(result, "addTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTag failed: unknown result");
    }

    public ReturnCode addTagGroup(GroupDB tagGroup) throws org.apache.thrift.TException
    {
      send_addTagGroup(tagGroup);
      return recv_addTagGroup();
    }

    public void send_addTagGroup(GroupDB tagGroup) throws org.apache.thrift.TException
    {
      addTagGroup_args args = new addTagGroup_args();
      args.setTagGroup(tagGroup);
      sendBase("addTagGroup", args);
    }

    public ReturnCode recv_addTagGroup() throws org.apache.thrift.TException
    {
      addTagGroup_result result = new addTagGroup_result();
      receiveBase(result, "addTagGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addTagGroup failed: unknown result");
    }

    public ReturnCode addSource(SourceDB source) throws org.apache.thrift.TException
    {
      send_addSource(source);
      return recv_addSource();
    }

    public void send_addSource(SourceDB source) throws org.apache.thrift.TException
    {
      addSource_args args = new addSource_args();
      args.setSource(source);
      sendBase("addSource", args);
    }

    public ReturnCode recv_addSource() throws org.apache.thrift.TException
    {
      addSource_result result = new addSource_result();
      receiveBase(result, "addSource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSource failed: unknown result");
    }

    public ReturnCode addAttribute(AttributeDB attribute) throws org.apache.thrift.TException
    {
      send_addAttribute(attribute);
      return recv_addAttribute();
    }

    public void send_addAttribute(AttributeDB attribute) throws org.apache.thrift.TException
    {
      addAttribute_args args = new addAttribute_args();
      args.setAttribute(attribute);
      sendBase("addAttribute", args);
    }

    public ReturnCode recv_addAttribute() throws org.apache.thrift.TException
    {
      addAttribute_result result = new addAttribute_result();
      receiveBase(result, "addAttribute");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAttribute failed: unknown result");
    }

    public MultiTagResult getMultiTags(List<Integer> tagIdList) throws org.apache.thrift.TException
    {
      send_getMultiTags(tagIdList);
      return recv_getMultiTags();
    }

    public void send_getMultiTags(List<Integer> tagIdList) throws org.apache.thrift.TException
    {
      getMultiTags_args args = new getMultiTags_args();
      args.setTagIdList(tagIdList);
      sendBase("getMultiTags", args);
    }

    public MultiTagResult recv_getMultiTags() throws org.apache.thrift.TException
    {
      getMultiTags_result result = new getMultiTags_result();
      receiveBase(result, "getMultiTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiTags failed: unknown result");
    }

    public MultiGroupResult getMultiGroups(List<Integer> groupIdList) throws org.apache.thrift.TException
    {
      send_getMultiGroups(groupIdList);
      return recv_getMultiGroups();
    }

    public void send_getMultiGroups(List<Integer> groupIdList) throws org.apache.thrift.TException
    {
      getMultiGroups_args args = new getMultiGroups_args();
      args.setGroupIdList(groupIdList);
      sendBase("getMultiGroups", args);
    }

    public MultiGroupResult recv_getMultiGroups() throws org.apache.thrift.TException
    {
      getMultiGroups_result result = new getMultiGroups_result();
      receiveBase(result, "getMultiGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiGroups failed: unknown result");
    }

    public MultiSourceResult getMultiSources(List<Integer> sourceIdList) throws org.apache.thrift.TException
    {
      send_getMultiSources(sourceIdList);
      return recv_getMultiSources();
    }

    public void send_getMultiSources(List<Integer> sourceIdList) throws org.apache.thrift.TException
    {
      getMultiSources_args args = new getMultiSources_args();
      args.setSourceIdList(sourceIdList);
      sendBase("getMultiSources", args);
    }

    public MultiSourceResult recv_getMultiSources() throws org.apache.thrift.TException
    {
      getMultiSources_result result = new getMultiSources_result();
      receiveBase(result, "getMultiSources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiSources failed: unknown result");
    }

    public MultiAttributeResult getMultiAttributes(List<Integer> attrIdList) throws org.apache.thrift.TException
    {
      send_getMultiAttributes(attrIdList);
      return recv_getMultiAttributes();
    }

    public void send_getMultiAttributes(List<Integer> attrIdList) throws org.apache.thrift.TException
    {
      getMultiAttributes_args args = new getMultiAttributes_args();
      args.setAttrIdList(attrIdList);
      sendBase("getMultiAttributes", args);
    }

    public MultiAttributeResult recv_getMultiAttributes() throws org.apache.thrift.TException
    {
      getMultiAttributes_result result = new getMultiAttributes_result();
      receiveBase(result, "getMultiAttributes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiAttributes failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addProfileTag(ProfileTag profileTag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProfileTag_call method_call = new addProfileTag_call(profileTag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProfileTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProfileTag profileTag;
      public addProfileTag_call(ProfileTag profileTag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.profileTag = profileTag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProfileTag", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        addProfileTag_args args = new addProfileTag_args();
        args.setProfileTag(profileTag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void addMultiProfileTag(List<ProfileTag> profileTagList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMultiProfileTag_call method_call = new addMultiProfileTag_call(profileTagList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMultiProfileTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ProfileTag> profileTagList;
      public addMultiProfileTag_call(List<ProfileTag> profileTagList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.profileTagList = profileTagList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMultiProfileTag", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        addMultiProfileTag_args args = new addMultiProfileTag_args();
        args.setProfileTagList(profileTagList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getProfileTag(String profileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileTag_call method_call = new getProfileTag_call(profileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileId;
      public getProfileTag_call(String profileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileId = profileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileTag_args args = new getProfileTag_args();
        args.setProfileId(profileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProfileTagResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileTag();
      }
    }

    public void getMultiProfileTags(List<String> profileIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiProfileTags_call method_call = new getMultiProfileTags_call(profileIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiProfileTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> profileIdList;
      public getMultiProfileTags_call(List<String> profileIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileIdList = profileIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiProfileTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiProfileTags_args args = new getMultiProfileTags_args();
        args.setProfileIdList(profileIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MultiProfileTagsResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiProfileTags();
      }
    }

    public void addProfileAttr(ProfileAttribute profileAttr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addProfileAttr_call method_call = new addProfileAttr_call(profileAttr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addProfileAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProfileAttribute profileAttr;
      public addProfileAttr_call(ProfileAttribute profileAttr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.profileAttr = profileAttr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addProfileAttr", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        addProfileAttr_args args = new addProfileAttr_args();
        args.setProfileAttr(profileAttr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void addMultiProfileAttrs(List<ProfileAttribute> profileAttrsList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMultiProfileAttrs_call method_call = new addMultiProfileAttrs_call(profileAttrsList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMultiProfileAttrs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<ProfileAttribute> profileAttrsList;
      public addMultiProfileAttrs_call(List<ProfileAttribute> profileAttrsList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.profileAttrsList = profileAttrsList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMultiProfileAttrs", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        addMultiProfileAttrs_args args = new addMultiProfileAttrs_args();
        args.setProfileAttrsList(profileAttrsList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void getProfileAttr(String profileId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileAttr_call method_call = new getProfileAttr_call(profileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileAttr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String profileId;
      public getProfileAttr_call(String profileId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileId = profileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileAttr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileAttr_args args = new getProfileAttr_args();
        args.setProfileId(profileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProfileAttributeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileAttr();
      }
    }

    public void getMultiProfileAttrs(List<String> profileIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiProfileAttrs_call method_call = new getMultiProfileAttrs_call(profileIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiProfileAttrs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> profileIdList;
      public getMultiProfileAttrs_call(List<String> profileIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.profileIdList = profileIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiProfileAttrs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiProfileAttrs_args args = new getMultiProfileAttrs_args();
        args.setProfileIdList(profileIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MultiProfileAttributeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiProfileAttrs();
      }
    }

    public void addTag(TagDB tag, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTag_call method_call = new addTag_call(tag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TagDB tag;
      public addTag_call(TagDB tag, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tag = tag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTag_args args = new addTag_args();
        args.setTag(tag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTag();
      }
    }

    public void addTagGroup(GroupDB tagGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addTagGroup_call method_call = new addTagGroup_call(tagGroup, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addTagGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GroupDB tagGroup;
      public addTagGroup_call(GroupDB tagGroup, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagGroup = tagGroup;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addTagGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addTagGroup_args args = new addTagGroup_args();
        args.setTagGroup(tagGroup);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addTagGroup();
      }
    }

    public void addSource(SourceDB source, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSource_call method_call = new addSource_call(source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSource_call extends org.apache.thrift.async.TAsyncMethodCall {
      private SourceDB source;
      public addSource_call(SourceDB source, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSource_args args = new addSource_args();
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSource();
      }
    }

    public void addAttribute(AttributeDB attribute, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAttribute_call method_call = new addAttribute_call(attribute, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAttribute_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AttributeDB attribute;
      public addAttribute_call(AttributeDB attribute, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attribute = attribute;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAttribute", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAttribute_args args = new addAttribute_args();
        args.setAttribute(attribute);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnCode getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAttribute();
      }
    }

    public void getMultiTags(List<Integer> tagIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiTags_call method_call = new getMultiTags_call(tagIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> tagIdList;
      public getMultiTags_call(List<Integer> tagIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagIdList = tagIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiTags_args args = new getMultiTags_args();
        args.setTagIdList(tagIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MultiTagResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiTags();
      }
    }

    public void getMultiGroups(List<Integer> groupIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiGroups_call method_call = new getMultiGroups_call(groupIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> groupIdList;
      public getMultiGroups_call(List<Integer> groupIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupIdList = groupIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiGroups_args args = new getMultiGroups_args();
        args.setGroupIdList(groupIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MultiGroupResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiGroups();
      }
    }

    public void getMultiSources(List<Integer> sourceIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiSources_call method_call = new getMultiSources_call(sourceIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiSources_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> sourceIdList;
      public getMultiSources_call(List<Integer> sourceIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sourceIdList = sourceIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiSources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiSources_args args = new getMultiSources_args();
        args.setSourceIdList(sourceIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MultiSourceResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiSources();
      }
    }

    public void getMultiAttributes(List<Integer> attrIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiAttributes_call method_call = new getMultiAttributes_call(attrIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiAttributes_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Integer> attrIdList;
      public getMultiAttributes_call(List<Integer> attrIdList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.attrIdList = attrIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiAttributes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiAttributes_args args = new getMultiAttributes_args();
        args.setAttrIdList(attrIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MultiAttributeResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiAttributes();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addProfileTag", new addProfileTag());
      processMap.put("addMultiProfileTag", new addMultiProfileTag());
      processMap.put("getProfileTag", new getProfileTag());
      processMap.put("getMultiProfileTags", new getMultiProfileTags());
      processMap.put("addProfileAttr", new addProfileAttr());
      processMap.put("addMultiProfileAttrs", new addMultiProfileAttrs());
      processMap.put("getProfileAttr", new getProfileAttr());
      processMap.put("getMultiProfileAttrs", new getMultiProfileAttrs());
      processMap.put("addTag", new addTag());
      processMap.put("addTagGroup", new addTagGroup());
      processMap.put("addSource", new addSource());
      processMap.put("addAttribute", new addAttribute());
      processMap.put("getMultiTags", new getMultiTags());
      processMap.put("getMultiGroups", new getMultiGroups());
      processMap.put("getMultiSources", new getMultiSources());
      processMap.put("getMultiAttributes", new getMultiAttributes());
      return processMap;
    }

    public static class addProfileTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProfileTag_args> {
      public addProfileTag() {
        super("addProfileTag");
      }

      public addProfileTag_args getEmptyArgsInstance() {
        return new addProfileTag_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, addProfileTag_args args) throws org.apache.thrift.TException {
        iface.addProfileTag(args.profileTag);
        return null;
      }
    }

    public static class addMultiProfileTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMultiProfileTag_args> {
      public addMultiProfileTag() {
        super("addMultiProfileTag");
      }

      public addMultiProfileTag_args getEmptyArgsInstance() {
        return new addMultiProfileTag_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, addMultiProfileTag_args args) throws org.apache.thrift.TException {
        iface.addMultiProfileTag(args.profileTagList);
        return null;
      }
    }

    public static class getProfileTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileTag_args> {
      public getProfileTag() {
        super("getProfileTag");
      }

      public getProfileTag_args getEmptyArgsInstance() {
        return new getProfileTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileTag_result getResult(I iface, getProfileTag_args args) throws org.apache.thrift.TException {
        getProfileTag_result result = new getProfileTag_result();
        result.success = iface.getProfileTag(args.profileId);
        return result;
      }
    }

    public static class getMultiProfileTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiProfileTags_args> {
      public getMultiProfileTags() {
        super("getMultiProfileTags");
      }

      public getMultiProfileTags_args getEmptyArgsInstance() {
        return new getMultiProfileTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiProfileTags_result getResult(I iface, getMultiProfileTags_args args) throws org.apache.thrift.TException {
        getMultiProfileTags_result result = new getMultiProfileTags_result();
        result.success = iface.getMultiProfileTags(args.profileIdList);
        return result;
      }
    }

    public static class addProfileAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addProfileAttr_args> {
      public addProfileAttr() {
        super("addProfileAttr");
      }

      public addProfileAttr_args getEmptyArgsInstance() {
        return new addProfileAttr_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, addProfileAttr_args args) throws org.apache.thrift.TException {
        iface.addProfileAttr(args.profileAttr);
        return null;
      }
    }

    public static class addMultiProfileAttrs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMultiProfileAttrs_args> {
      public addMultiProfileAttrs() {
        super("addMultiProfileAttrs");
      }

      public addMultiProfileAttrs_args getEmptyArgsInstance() {
        return new addMultiProfileAttrs_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, addMultiProfileAttrs_args args) throws org.apache.thrift.TException {
        iface.addMultiProfileAttrs(args.profileAttrsList);
        return null;
      }
    }

    public static class getProfileAttr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileAttr_args> {
      public getProfileAttr() {
        super("getProfileAttr");
      }

      public getProfileAttr_args getEmptyArgsInstance() {
        return new getProfileAttr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileAttr_result getResult(I iface, getProfileAttr_args args) throws org.apache.thrift.TException {
        getProfileAttr_result result = new getProfileAttr_result();
        result.success = iface.getProfileAttr(args.profileId);
        return result;
      }
    }

    public static class getMultiProfileAttrs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiProfileAttrs_args> {
      public getMultiProfileAttrs() {
        super("getMultiProfileAttrs");
      }

      public getMultiProfileAttrs_args getEmptyArgsInstance() {
        return new getMultiProfileAttrs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiProfileAttrs_result getResult(I iface, getMultiProfileAttrs_args args) throws org.apache.thrift.TException {
        getMultiProfileAttrs_result result = new getMultiProfileAttrs_result();
        result.success = iface.getMultiProfileAttrs(args.profileIdList);
        return result;
      }
    }

    public static class addTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTag_args> {
      public addTag() {
        super("addTag");
      }

      public addTag_args getEmptyArgsInstance() {
        return new addTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTag_result getResult(I iface, addTag_args args) throws org.apache.thrift.TException {
        addTag_result result = new addTag_result();
        result.success = iface.addTag(args.tag);
        return result;
      }
    }

    public static class addTagGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addTagGroup_args> {
      public addTagGroup() {
        super("addTagGroup");
      }

      public addTagGroup_args getEmptyArgsInstance() {
        return new addTagGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addTagGroup_result getResult(I iface, addTagGroup_args args) throws org.apache.thrift.TException {
        addTagGroup_result result = new addTagGroup_result();
        result.success = iface.addTagGroup(args.tagGroup);
        return result;
      }
    }

    public static class addSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSource_args> {
      public addSource() {
        super("addSource");
      }

      public addSource_args getEmptyArgsInstance() {
        return new addSource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSource_result getResult(I iface, addSource_args args) throws org.apache.thrift.TException {
        addSource_result result = new addSource_result();
        result.success = iface.addSource(args.source);
        return result;
      }
    }

    public static class addAttribute<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAttribute_args> {
      public addAttribute() {
        super("addAttribute");
      }

      public addAttribute_args getEmptyArgsInstance() {
        return new addAttribute_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAttribute_result getResult(I iface, addAttribute_args args) throws org.apache.thrift.TException {
        addAttribute_result result = new addAttribute_result();
        result.success = iface.addAttribute(args.attribute);
        return result;
      }
    }

    public static class getMultiTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiTags_args> {
      public getMultiTags() {
        super("getMultiTags");
      }

      public getMultiTags_args getEmptyArgsInstance() {
        return new getMultiTags_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiTags_result getResult(I iface, getMultiTags_args args) throws org.apache.thrift.TException {
        getMultiTags_result result = new getMultiTags_result();
        result.success = iface.getMultiTags(args.tagIdList);
        return result;
      }
    }

    public static class getMultiGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiGroups_args> {
      public getMultiGroups() {
        super("getMultiGroups");
      }

      public getMultiGroups_args getEmptyArgsInstance() {
        return new getMultiGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiGroups_result getResult(I iface, getMultiGroups_args args) throws org.apache.thrift.TException {
        getMultiGroups_result result = new getMultiGroups_result();
        result.success = iface.getMultiGroups(args.groupIdList);
        return result;
      }
    }

    public static class getMultiSources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiSources_args> {
      public getMultiSources() {
        super("getMultiSources");
      }

      public getMultiSources_args getEmptyArgsInstance() {
        return new getMultiSources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiSources_result getResult(I iface, getMultiSources_args args) throws org.apache.thrift.TException {
        getMultiSources_result result = new getMultiSources_result();
        result.success = iface.getMultiSources(args.sourceIdList);
        return result;
      }
    }

    public static class getMultiAttributes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiAttributes_args> {
      public getMultiAttributes() {
        super("getMultiAttributes");
      }

      public getMultiAttributes_args getEmptyArgsInstance() {
        return new getMultiAttributes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiAttributes_result getResult(I iface, getMultiAttributes_args args) throws org.apache.thrift.TException {
        getMultiAttributes_result result = new getMultiAttributes_result();
        result.success = iface.getMultiAttributes(args.attrIdList);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addProfileTag", new addProfileTag());
      processMap.put("addMultiProfileTag", new addMultiProfileTag());
      processMap.put("getProfileTag", new getProfileTag());
      processMap.put("getMultiProfileTags", new getMultiProfileTags());
      processMap.put("addProfileAttr", new addProfileAttr());
      processMap.put("addMultiProfileAttrs", new addMultiProfileAttrs());
      processMap.put("getProfileAttr", new getProfileAttr());
      processMap.put("getMultiProfileAttrs", new getMultiProfileAttrs());
      processMap.put("addTag", new addTag());
      processMap.put("addTagGroup", new addTagGroup());
      processMap.put("addSource", new addSource());
      processMap.put("addAttribute", new addAttribute());
      processMap.put("getMultiTags", new getMultiTags());
      processMap.put("getMultiGroups", new getMultiGroups());
      processMap.put("getMultiSources", new getMultiSources());
      processMap.put("getMultiAttributes", new getMultiAttributes());
      return processMap;
    }

    public static class addProfileTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProfileTag_args, Void> {
      public addProfileTag() {
        super("addProfileTag");
      }

      public addProfileTag_args getEmptyArgsInstance() {
        return new addProfileTag_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, addProfileTag_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addProfileTag(args.profileTag,resultHandler);
      }
    }

    public static class addMultiProfileTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMultiProfileTag_args, Void> {
      public addMultiProfileTag() {
        super("addMultiProfileTag");
      }

      public addMultiProfileTag_args getEmptyArgsInstance() {
        return new addMultiProfileTag_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, addMultiProfileTag_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addMultiProfileTag(args.profileTagList,resultHandler);
      }
    }

    public static class getProfileTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileTag_args, ProfileTagResult> {
      public getProfileTag() {
        super("getProfileTag");
      }

      public getProfileTag_args getEmptyArgsInstance() {
        return new getProfileTag_args();
      }

      public AsyncMethodCallback<ProfileTagResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProfileTagResult>() {
          public void onComplete(ProfileTagResult o) {
            getProfileTag_result result = new getProfileTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileTag_result result = new getProfileTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileTag_args args, org.apache.thrift.async.AsyncMethodCallback<ProfileTagResult> resultHandler) throws TException {
        iface.getProfileTag(args.profileId,resultHandler);
      }
    }

    public static class getMultiProfileTags<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiProfileTags_args, MultiProfileTagsResult> {
      public getMultiProfileTags() {
        super("getMultiProfileTags");
      }

      public getMultiProfileTags_args getEmptyArgsInstance() {
        return new getMultiProfileTags_args();
      }

      public AsyncMethodCallback<MultiProfileTagsResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MultiProfileTagsResult>() {
          public void onComplete(MultiProfileTagsResult o) {
            getMultiProfileTags_result result = new getMultiProfileTags_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMultiProfileTags_result result = new getMultiProfileTags_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiProfileTags_args args, org.apache.thrift.async.AsyncMethodCallback<MultiProfileTagsResult> resultHandler) throws TException {
        iface.getMultiProfileTags(args.profileIdList,resultHandler);
      }
    }

    public static class addProfileAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addProfileAttr_args, Void> {
      public addProfileAttr() {
        super("addProfileAttr");
      }

      public addProfileAttr_args getEmptyArgsInstance() {
        return new addProfileAttr_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, addProfileAttr_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addProfileAttr(args.profileAttr,resultHandler);
      }
    }

    public static class addMultiProfileAttrs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMultiProfileAttrs_args, Void> {
      public addMultiProfileAttrs() {
        super("addMultiProfileAttrs");
      }

      public addMultiProfileAttrs_args getEmptyArgsInstance() {
        return new addMultiProfileAttrs_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, addMultiProfileAttrs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addMultiProfileAttrs(args.profileAttrsList,resultHandler);
      }
    }

    public static class getProfileAttr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileAttr_args, ProfileAttributeResult> {
      public getProfileAttr() {
        super("getProfileAttr");
      }

      public getProfileAttr_args getEmptyArgsInstance() {
        return new getProfileAttr_args();
      }

      public AsyncMethodCallback<ProfileAttributeResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProfileAttributeResult>() {
          public void onComplete(ProfileAttributeResult o) {
            getProfileAttr_result result = new getProfileAttr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileAttr_result result = new getProfileAttr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileAttr_args args, org.apache.thrift.async.AsyncMethodCallback<ProfileAttributeResult> resultHandler) throws TException {
        iface.getProfileAttr(args.profileId,resultHandler);
      }
    }

    public static class getMultiProfileAttrs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiProfileAttrs_args, MultiProfileAttributeResult> {
      public getMultiProfileAttrs() {
        super("getMultiProfileAttrs");
      }

      public getMultiProfileAttrs_args getEmptyArgsInstance() {
        return new getMultiProfileAttrs_args();
      }

      public AsyncMethodCallback<MultiProfileAttributeResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MultiProfileAttributeResult>() {
          public void onComplete(MultiProfileAttributeResult o) {
            getMultiProfileAttrs_result result = new getMultiProfileAttrs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMultiProfileAttrs_result result = new getMultiProfileAttrs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiProfileAttrs_args args, org.apache.thrift.async.AsyncMethodCallback<MultiProfileAttributeResult> resultHandler) throws TException {
        iface.getMultiProfileAttrs(args.profileIdList,resultHandler);
      }
    }

    public static class addTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTag_args, ReturnCode> {
      public addTag() {
        super("addTag");
      }

      public addTag_args getEmptyArgsInstance() {
        return new addTag_args();
      }

      public AsyncMethodCallback<ReturnCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnCode>() {
          public void onComplete(ReturnCode o) {
            addTag_result result = new addTag_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTag_result result = new addTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTag_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnCode> resultHandler) throws TException {
        iface.addTag(args.tag,resultHandler);
      }
    }

    public static class addTagGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addTagGroup_args, ReturnCode> {
      public addTagGroup() {
        super("addTagGroup");
      }

      public addTagGroup_args getEmptyArgsInstance() {
        return new addTagGroup_args();
      }

      public AsyncMethodCallback<ReturnCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnCode>() {
          public void onComplete(ReturnCode o) {
            addTagGroup_result result = new addTagGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addTagGroup_result result = new addTagGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addTagGroup_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnCode> resultHandler) throws TException {
        iface.addTagGroup(args.tagGroup,resultHandler);
      }
    }

    public static class addSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSource_args, ReturnCode> {
      public addSource() {
        super("addSource");
      }

      public addSource_args getEmptyArgsInstance() {
        return new addSource_args();
      }

      public AsyncMethodCallback<ReturnCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnCode>() {
          public void onComplete(ReturnCode o) {
            addSource_result result = new addSource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addSource_result result = new addSource_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSource_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnCode> resultHandler) throws TException {
        iface.addSource(args.source,resultHandler);
      }
    }

    public static class addAttribute<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAttribute_args, ReturnCode> {
      public addAttribute() {
        super("addAttribute");
      }

      public addAttribute_args getEmptyArgsInstance() {
        return new addAttribute_args();
      }

      public AsyncMethodCallback<ReturnCode> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnCode>() {
          public void onComplete(ReturnCode o) {
            addAttribute_result result = new addAttribute_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addAttribute_result result = new addAttribute_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAttribute_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnCode> resultHandler) throws TException {
        iface.addAttribute(args.attribute,resultHandler);
      }
    }

    public static class getMultiTags<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiTags_args, MultiTagResult> {
      public getMultiTags() {
        super("getMultiTags");
      }

      public getMultiTags_args getEmptyArgsInstance() {
        return new getMultiTags_args();
      }

      public AsyncMethodCallback<MultiTagResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MultiTagResult>() {
          public void onComplete(MultiTagResult o) {
            getMultiTags_result result = new getMultiTags_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMultiTags_result result = new getMultiTags_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiTags_args args, org.apache.thrift.async.AsyncMethodCallback<MultiTagResult> resultHandler) throws TException {
        iface.getMultiTags(args.tagIdList,resultHandler);
      }
    }

    public static class getMultiGroups<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiGroups_args, MultiGroupResult> {
      public getMultiGroups() {
        super("getMultiGroups");
      }

      public getMultiGroups_args getEmptyArgsInstance() {
        return new getMultiGroups_args();
      }

      public AsyncMethodCallback<MultiGroupResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MultiGroupResult>() {
          public void onComplete(MultiGroupResult o) {
            getMultiGroups_result result = new getMultiGroups_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMultiGroups_result result = new getMultiGroups_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiGroups_args args, org.apache.thrift.async.AsyncMethodCallback<MultiGroupResult> resultHandler) throws TException {
        iface.getMultiGroups(args.groupIdList,resultHandler);
      }
    }

    public static class getMultiSources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiSources_args, MultiSourceResult> {
      public getMultiSources() {
        super("getMultiSources");
      }

      public getMultiSources_args getEmptyArgsInstance() {
        return new getMultiSources_args();
      }

      public AsyncMethodCallback<MultiSourceResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MultiSourceResult>() {
          public void onComplete(MultiSourceResult o) {
            getMultiSources_result result = new getMultiSources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMultiSources_result result = new getMultiSources_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiSources_args args, org.apache.thrift.async.AsyncMethodCallback<MultiSourceResult> resultHandler) throws TException {
        iface.getMultiSources(args.sourceIdList,resultHandler);
      }
    }

    public static class getMultiAttributes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiAttributes_args, MultiAttributeResult> {
      public getMultiAttributes() {
        super("getMultiAttributes");
      }

      public getMultiAttributes_args getEmptyArgsInstance() {
        return new getMultiAttributes_args();
      }

      public AsyncMethodCallback<MultiAttributeResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MultiAttributeResult>() {
          public void onComplete(MultiAttributeResult o) {
            getMultiAttributes_result result = new getMultiAttributes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMultiAttributes_result result = new getMultiAttributes_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiAttributes_args args, org.apache.thrift.async.AsyncMethodCallback<MultiAttributeResult> resultHandler) throws TException {
        iface.getMultiAttributes(args.attrIdList,resultHandler);
      }
    }

  }

  public static class addProfileTag_args implements org.apache.thrift.TBase<addProfileTag_args, addProfileTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileTag_args");

    private static final org.apache.thrift.protocol.TField PROFILE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("profileTag", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProfileTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProfileTag_argsTupleSchemeFactory());
    }

    public ProfileTag profileTag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_TAG((short)1, "profileTag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_TAG
            return PROFILE_TAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_TAG, new org.apache.thrift.meta_data.FieldMetaData("profileTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileTag.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileTag_args.class, metaDataMap);
    }

    public addProfileTag_args() {
    }

    public addProfileTag_args(
      ProfileTag profileTag)
    {
      this();
      this.profileTag = profileTag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProfileTag_args(addProfileTag_args other) {
      if (other.isSetProfileTag()) {
        this.profileTag = new ProfileTag(other.profileTag);
      }
    }

    public addProfileTag_args deepCopy() {
      return new addProfileTag_args(this);
    }

    @Override
    public void clear() {
      this.profileTag = null;
    }

    public ProfileTag getProfileTag() {
      return this.profileTag;
    }

    public addProfileTag_args setProfileTag(ProfileTag profileTag) {
      this.profileTag = profileTag;
      return this;
    }

    public void unsetProfileTag() {
      this.profileTag = null;
    }

    /** Returns true if field profileTag is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileTag() {
      return this.profileTag != null;
    }

    public void setProfileTagIsSet(boolean value) {
      if (!value) {
        this.profileTag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_TAG:
        if (value == null) {
          unsetProfileTag();
        } else {
          setProfileTag((ProfileTag)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_TAG:
        return getProfileTag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_TAG:
        return isSetProfileTag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProfileTag_args)
        return this.equals((addProfileTag_args)that);
      return false;
    }

    public boolean equals(addProfileTag_args that) {
      if (that == null)
        return false;

      boolean this_present_profileTag = true && this.isSetProfileTag();
      boolean that_present_profileTag = true && that.isSetProfileTag();
      if (this_present_profileTag || that_present_profileTag) {
        if (!(this_present_profileTag && that_present_profileTag))
          return false;
        if (!this.profileTag.equals(that.profileTag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileTag = true && (isSetProfileTag());
      list.add(present_profileTag);
      if (present_profileTag)
        list.add(profileTag);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProfileTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileTag()).compareTo(other.isSetProfileTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileTag, other.profileTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProfileTag_args(");
      boolean first = true;

      sb.append("profileTag:");
      if (this.profileTag == null) {
        sb.append("null");
      } else {
        sb.append(this.profileTag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileTag != null) {
        profileTag.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProfileTag_argsStandardSchemeFactory implements SchemeFactory {
      public addProfileTag_argsStandardScheme getScheme() {
        return new addProfileTag_argsStandardScheme();
      }
    }

    private static class addProfileTag_argsStandardScheme extends StandardScheme<addProfileTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileTag = new ProfileTag();
                struct.profileTag.read(iprot);
                struct.setProfileTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileTag != null) {
          oprot.writeFieldBegin(PROFILE_TAG_FIELD_DESC);
          struct.profileTag.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProfileTag_argsTupleSchemeFactory implements SchemeFactory {
      public addProfileTag_argsTupleScheme getScheme() {
        return new addProfileTag_argsTupleScheme();
      }
    }

    private static class addProfileTag_argsTupleScheme extends TupleScheme<addProfileTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProfileTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileTag()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileTag()) {
          struct.profileTag.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProfileTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileTag = new ProfileTag();
          struct.profileTag.read(iprot);
          struct.setProfileTagIsSet(true);
        }
      }
    }

  }

  public static class addMultiProfileTag_args implements org.apache.thrift.TBase<addMultiProfileTag_args, addMultiProfileTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMultiProfileTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMultiProfileTag_args");

    private static final org.apache.thrift.protocol.TField PROFILE_TAG_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("profileTagList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMultiProfileTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMultiProfileTag_argsTupleSchemeFactory());
    }

    public List<ProfileTag> profileTagList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_TAG_LIST((short)1, "profileTagList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_TAG_LIST
            return PROFILE_TAG_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_TAG_LIST, new org.apache.thrift.meta_data.FieldMetaData("profileTagList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileTag.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMultiProfileTag_args.class, metaDataMap);
    }

    public addMultiProfileTag_args() {
    }

    public addMultiProfileTag_args(
      List<ProfileTag> profileTagList)
    {
      this();
      this.profileTagList = profileTagList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMultiProfileTag_args(addMultiProfileTag_args other) {
      if (other.isSetProfileTagList()) {
        List<ProfileTag> __this__profileTagList = new ArrayList<ProfileTag>(other.profileTagList.size());
        for (ProfileTag other_element : other.profileTagList) {
          __this__profileTagList.add(new ProfileTag(other_element));
        }
        this.profileTagList = __this__profileTagList;
      }
    }

    public addMultiProfileTag_args deepCopy() {
      return new addMultiProfileTag_args(this);
    }

    @Override
    public void clear() {
      this.profileTagList = null;
    }

    public int getProfileTagListSize() {
      return (this.profileTagList == null) ? 0 : this.profileTagList.size();
    }

    public java.util.Iterator<ProfileTag> getProfileTagListIterator() {
      return (this.profileTagList == null) ? null : this.profileTagList.iterator();
    }

    public void addToProfileTagList(ProfileTag elem) {
      if (this.profileTagList == null) {
        this.profileTagList = new ArrayList<ProfileTag>();
      }
      this.profileTagList.add(elem);
    }

    public List<ProfileTag> getProfileTagList() {
      return this.profileTagList;
    }

    public addMultiProfileTag_args setProfileTagList(List<ProfileTag> profileTagList) {
      this.profileTagList = profileTagList;
      return this;
    }

    public void unsetProfileTagList() {
      this.profileTagList = null;
    }

    /** Returns true if field profileTagList is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileTagList() {
      return this.profileTagList != null;
    }

    public void setProfileTagListIsSet(boolean value) {
      if (!value) {
        this.profileTagList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_TAG_LIST:
        if (value == null) {
          unsetProfileTagList();
        } else {
          setProfileTagList((List<ProfileTag>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_TAG_LIST:
        return getProfileTagList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_TAG_LIST:
        return isSetProfileTagList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMultiProfileTag_args)
        return this.equals((addMultiProfileTag_args)that);
      return false;
    }

    public boolean equals(addMultiProfileTag_args that) {
      if (that == null)
        return false;

      boolean this_present_profileTagList = true && this.isSetProfileTagList();
      boolean that_present_profileTagList = true && that.isSetProfileTagList();
      if (this_present_profileTagList || that_present_profileTagList) {
        if (!(this_present_profileTagList && that_present_profileTagList))
          return false;
        if (!this.profileTagList.equals(that.profileTagList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileTagList = true && (isSetProfileTagList());
      list.add(present_profileTagList);
      if (present_profileTagList)
        list.add(profileTagList);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMultiProfileTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileTagList()).compareTo(other.isSetProfileTagList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileTagList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileTagList, other.profileTagList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMultiProfileTag_args(");
      boolean first = true;

      sb.append("profileTagList:");
      if (this.profileTagList == null) {
        sb.append("null");
      } else {
        sb.append(this.profileTagList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMultiProfileTag_argsStandardSchemeFactory implements SchemeFactory {
      public addMultiProfileTag_argsStandardScheme getScheme() {
        return new addMultiProfileTag_argsStandardScheme();
      }
    }

    private static class addMultiProfileTag_argsStandardScheme extends StandardScheme<addMultiProfileTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMultiProfileTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_TAG_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.profileTagList = new ArrayList<ProfileTag>(_list0.size);
                  ProfileTag _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ProfileTag();
                    _elem1.read(iprot);
                    struct.profileTagList.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileTagListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMultiProfileTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileTagList != null) {
          oprot.writeFieldBegin(PROFILE_TAG_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileTagList.size()));
            for (ProfileTag _iter3 : struct.profileTagList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMultiProfileTag_argsTupleSchemeFactory implements SchemeFactory {
      public addMultiProfileTag_argsTupleScheme getScheme() {
        return new addMultiProfileTag_argsTupleScheme();
      }
    }

    private static class addMultiProfileTag_argsTupleScheme extends TupleScheme<addMultiProfileTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMultiProfileTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileTagList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileTagList()) {
          {
            oprot.writeI32(struct.profileTagList.size());
            for (ProfileTag _iter4 : struct.profileTagList)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMultiProfileTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileTagList = new ArrayList<ProfileTag>(_list5.size);
            ProfileTag _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ProfileTag();
              _elem6.read(iprot);
              struct.profileTagList.add(_elem6);
            }
          }
          struct.setProfileTagListIsSet(true);
        }
      }
    }

  }

  public static class getProfileTag_args implements org.apache.thrift.TBase<getProfileTag_args, getProfileTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileTag_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileTag_argsTupleSchemeFactory());
    }

    public String profileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ID((short)1, "profileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ID
            return PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileTag_args.class, metaDataMap);
    }

    public getProfileTag_args() {
    }

    public getProfileTag_args(
      String profileId)
    {
      this();
      this.profileId = profileId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileTag_args(getProfileTag_args other) {
      if (other.isSetProfileId()) {
        this.profileId = other.profileId;
      }
    }

    public getProfileTag_args deepCopy() {
      return new getProfileTag_args(this);
    }

    @Override
    public void clear() {
      this.profileId = null;
    }

    public String getProfileId() {
      return this.profileId;
    }

    public getProfileTag_args setProfileId(String profileId) {
      this.profileId = profileId;
      return this;
    }

    public void unsetProfileId() {
      this.profileId = null;
    }

    /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileId() {
      return this.profileId != null;
    }

    public void setProfileIdIsSet(boolean value) {
      if (!value) {
        this.profileId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ID:
        if (value == null) {
          unsetProfileId();
        } else {
          setProfileId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ID:
        return getProfileId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ID:
        return isSetProfileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileTag_args)
        return this.equals((getProfileTag_args)that);
      return false;
    }

    public boolean equals(getProfileTag_args that) {
      if (that == null)
        return false;

      boolean this_present_profileId = true && this.isSetProfileId();
      boolean that_present_profileId = true && that.isSetProfileId();
      if (this_present_profileId || that_present_profileId) {
        if (!(this_present_profileId && that_present_profileId))
          return false;
        if (!this.profileId.equals(that.profileId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileId = true && (isSetProfileId());
      list.add(present_profileId);
      if (present_profileId)
        list.add(profileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileTag_args(");
      boolean first = true;

      sb.append("profileId:");
      if (this.profileId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileTag_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileTag_argsStandardScheme getScheme() {
        return new getProfileTag_argsStandardScheme();
      }
    }

    private static class getProfileTag_argsStandardScheme extends StandardScheme<getProfileTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileId = iprot.readString();
                struct.setProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileId != null) {
          oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
          oprot.writeString(struct.profileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileTag_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileTag_argsTupleScheme getScheme() {
        return new getProfileTag_argsTupleScheme();
      }
    }

    private static class getProfileTag_argsTupleScheme extends TupleScheme<getProfileTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileId()) {
          oprot.writeString(struct.profileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileId = iprot.readString();
          struct.setProfileIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileTag_result implements org.apache.thrift.TBase<getProfileTag_result, getProfileTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileTag_resultTupleSchemeFactory());
    }

    public ProfileTagResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileTagResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileTag_result.class, metaDataMap);
    }

    public getProfileTag_result() {
    }

    public getProfileTag_result(
      ProfileTagResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileTag_result(getProfileTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProfileTagResult(other.success);
      }
    }

    public getProfileTag_result deepCopy() {
      return new getProfileTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProfileTagResult getSuccess() {
      return this.success;
    }

    public getProfileTag_result setSuccess(ProfileTagResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProfileTagResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileTag_result)
        return this.equals((getProfileTag_result)that);
      return false;
    }

    public boolean equals(getProfileTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileTag_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileTag_resultStandardScheme getScheme() {
        return new getProfileTag_resultStandardScheme();
      }
    }

    private static class getProfileTag_resultStandardScheme extends StandardScheme<getProfileTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProfileTagResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileTag_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileTag_resultTupleScheme getScheme() {
        return new getProfileTag_resultTupleScheme();
      }
    }

    private static class getProfileTag_resultTupleScheme extends TupleScheme<getProfileTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProfileTagResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMultiProfileTags_args implements org.apache.thrift.TBase<getMultiProfileTags_args, getMultiProfileTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiProfileTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiProfileTags_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("profileIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiProfileTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiProfileTags_argsTupleSchemeFactory());
    }

    public List<String> profileIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ID_LIST((short)1, "profileIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ID_LIST
            return PROFILE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("profileIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiProfileTags_args.class, metaDataMap);
    }

    public getMultiProfileTags_args() {
    }

    public getMultiProfileTags_args(
      List<String> profileIdList)
    {
      this();
      this.profileIdList = profileIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiProfileTags_args(getMultiProfileTags_args other) {
      if (other.isSetProfileIdList()) {
        List<String> __this__profileIdList = new ArrayList<String>(other.profileIdList);
        this.profileIdList = __this__profileIdList;
      }
    }

    public getMultiProfileTags_args deepCopy() {
      return new getMultiProfileTags_args(this);
    }

    @Override
    public void clear() {
      this.profileIdList = null;
    }

    public int getProfileIdListSize() {
      return (this.profileIdList == null) ? 0 : this.profileIdList.size();
    }

    public java.util.Iterator<String> getProfileIdListIterator() {
      return (this.profileIdList == null) ? null : this.profileIdList.iterator();
    }

    public void addToProfileIdList(String elem) {
      if (this.profileIdList == null) {
        this.profileIdList = new ArrayList<String>();
      }
      this.profileIdList.add(elem);
    }

    public List<String> getProfileIdList() {
      return this.profileIdList;
    }

    public getMultiProfileTags_args setProfileIdList(List<String> profileIdList) {
      this.profileIdList = profileIdList;
      return this;
    }

    public void unsetProfileIdList() {
      this.profileIdList = null;
    }

    /** Returns true if field profileIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileIdList() {
      return this.profileIdList != null;
    }

    public void setProfileIdListIsSet(boolean value) {
      if (!value) {
        this.profileIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ID_LIST:
        if (value == null) {
          unsetProfileIdList();
        } else {
          setProfileIdList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ID_LIST:
        return getProfileIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ID_LIST:
        return isSetProfileIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiProfileTags_args)
        return this.equals((getMultiProfileTags_args)that);
      return false;
    }

    public boolean equals(getMultiProfileTags_args that) {
      if (that == null)
        return false;

      boolean this_present_profileIdList = true && this.isSetProfileIdList();
      boolean that_present_profileIdList = true && that.isSetProfileIdList();
      if (this_present_profileIdList || that_present_profileIdList) {
        if (!(this_present_profileIdList && that_present_profileIdList))
          return false;
        if (!this.profileIdList.equals(that.profileIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileIdList = true && (isSetProfileIdList());
      list.add(present_profileIdList);
      if (present_profileIdList)
        list.add(profileIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiProfileTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileIdList()).compareTo(other.isSetProfileIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileIdList, other.profileIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiProfileTags_args(");
      boolean first = true;

      sb.append("profileIdList:");
      if (this.profileIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.profileIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiProfileTags_argsStandardSchemeFactory implements SchemeFactory {
      public getMultiProfileTags_argsStandardScheme getScheme() {
        return new getMultiProfileTags_argsStandardScheme();
      }
    }

    private static class getMultiProfileTags_argsStandardScheme extends StandardScheme<getMultiProfileTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiProfileTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.profileIdList = new ArrayList<String>(_list8.size);
                  String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.profileIdList.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiProfileTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileIdList != null) {
          oprot.writeFieldBegin(PROFILE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.profileIdList.size()));
            for (String _iter11 : struct.profileIdList)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiProfileTags_argsTupleSchemeFactory implements SchemeFactory {
      public getMultiProfileTags_argsTupleScheme getScheme() {
        return new getMultiProfileTags_argsTupleScheme();
      }
    }

    private static class getMultiProfileTags_argsTupleScheme extends TupleScheme<getMultiProfileTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiProfileTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileIdList()) {
          {
            oprot.writeI32(struct.profileIdList.size());
            for (String _iter12 : struct.profileIdList)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiProfileTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.profileIdList = new ArrayList<String>(_list13.size);
            String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.profileIdList.add(_elem14);
            }
          }
          struct.setProfileIdListIsSet(true);
        }
      }
    }

  }

  public static class getMultiProfileTags_result implements org.apache.thrift.TBase<getMultiProfileTags_result, getMultiProfileTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiProfileTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiProfileTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiProfileTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiProfileTags_resultTupleSchemeFactory());
    }

    public MultiProfileTagsResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiProfileTagsResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiProfileTags_result.class, metaDataMap);
    }

    public getMultiProfileTags_result() {
    }

    public getMultiProfileTags_result(
      MultiProfileTagsResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiProfileTags_result(getMultiProfileTags_result other) {
      if (other.isSetSuccess()) {
        this.success = new MultiProfileTagsResult(other.success);
      }
    }

    public getMultiProfileTags_result deepCopy() {
      return new getMultiProfileTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MultiProfileTagsResult getSuccess() {
      return this.success;
    }

    public getMultiProfileTags_result setSuccess(MultiProfileTagsResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MultiProfileTagsResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiProfileTags_result)
        return this.equals((getMultiProfileTags_result)that);
      return false;
    }

    public boolean equals(getMultiProfileTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiProfileTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiProfileTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiProfileTags_resultStandardSchemeFactory implements SchemeFactory {
      public getMultiProfileTags_resultStandardScheme getScheme() {
        return new getMultiProfileTags_resultStandardScheme();
      }
    }

    private static class getMultiProfileTags_resultStandardScheme extends StandardScheme<getMultiProfileTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiProfileTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MultiProfileTagsResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiProfileTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiProfileTags_resultTupleSchemeFactory implements SchemeFactory {
      public getMultiProfileTags_resultTupleScheme getScheme() {
        return new getMultiProfileTags_resultTupleScheme();
      }
    }

    private static class getMultiProfileTags_resultTupleScheme extends TupleScheme<getMultiProfileTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiProfileTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiProfileTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MultiProfileTagsResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addProfileAttr_args implements org.apache.thrift.TBase<addProfileAttr_args, addProfileAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<addProfileAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addProfileAttr_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("profileAttr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addProfileAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addProfileAttr_argsTupleSchemeFactory());
    }

    public ProfileAttribute profileAttr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ATTR((short)1, "profileAttr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ATTR
            return PROFILE_ATTR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ATTR, new org.apache.thrift.meta_data.FieldMetaData("profileAttr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileAttribute.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addProfileAttr_args.class, metaDataMap);
    }

    public addProfileAttr_args() {
    }

    public addProfileAttr_args(
      ProfileAttribute profileAttr)
    {
      this();
      this.profileAttr = profileAttr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addProfileAttr_args(addProfileAttr_args other) {
      if (other.isSetProfileAttr()) {
        this.profileAttr = new ProfileAttribute(other.profileAttr);
      }
    }

    public addProfileAttr_args deepCopy() {
      return new addProfileAttr_args(this);
    }

    @Override
    public void clear() {
      this.profileAttr = null;
    }

    public ProfileAttribute getProfileAttr() {
      return this.profileAttr;
    }

    public addProfileAttr_args setProfileAttr(ProfileAttribute profileAttr) {
      this.profileAttr = profileAttr;
      return this;
    }

    public void unsetProfileAttr() {
      this.profileAttr = null;
    }

    /** Returns true if field profileAttr is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileAttr() {
      return this.profileAttr != null;
    }

    public void setProfileAttrIsSet(boolean value) {
      if (!value) {
        this.profileAttr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ATTR:
        if (value == null) {
          unsetProfileAttr();
        } else {
          setProfileAttr((ProfileAttribute)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ATTR:
        return getProfileAttr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ATTR:
        return isSetProfileAttr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addProfileAttr_args)
        return this.equals((addProfileAttr_args)that);
      return false;
    }

    public boolean equals(addProfileAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_profileAttr = true && this.isSetProfileAttr();
      boolean that_present_profileAttr = true && that.isSetProfileAttr();
      if (this_present_profileAttr || that_present_profileAttr) {
        if (!(this_present_profileAttr && that_present_profileAttr))
          return false;
        if (!this.profileAttr.equals(that.profileAttr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileAttr = true && (isSetProfileAttr());
      list.add(present_profileAttr);
      if (present_profileAttr)
        list.add(profileAttr);

      return list.hashCode();
    }

    @Override
    public int compareTo(addProfileAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileAttr()).compareTo(other.isSetProfileAttr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileAttr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileAttr, other.profileAttr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addProfileAttr_args(");
      boolean first = true;

      sb.append("profileAttr:");
      if (this.profileAttr == null) {
        sb.append("null");
      } else {
        sb.append(this.profileAttr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (profileAttr != null) {
        profileAttr.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addProfileAttr_argsStandardSchemeFactory implements SchemeFactory {
      public addProfileAttr_argsStandardScheme getScheme() {
        return new addProfileAttr_argsStandardScheme();
      }
    }

    private static class addProfileAttr_argsStandardScheme extends StandardScheme<addProfileAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addProfileAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ATTR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.profileAttr = new ProfileAttribute();
                struct.profileAttr.read(iprot);
                struct.setProfileAttrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addProfileAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileAttr != null) {
          oprot.writeFieldBegin(PROFILE_ATTR_FIELD_DESC);
          struct.profileAttr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addProfileAttr_argsTupleSchemeFactory implements SchemeFactory {
      public addProfileAttr_argsTupleScheme getScheme() {
        return new addProfileAttr_argsTupleScheme();
      }
    }

    private static class addProfileAttr_argsTupleScheme extends TupleScheme<addProfileAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addProfileAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileAttr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileAttr()) {
          struct.profileAttr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addProfileAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileAttr = new ProfileAttribute();
          struct.profileAttr.read(iprot);
          struct.setProfileAttrIsSet(true);
        }
      }
    }

  }

  public static class addMultiProfileAttrs_args implements org.apache.thrift.TBase<addMultiProfileAttrs_args, addMultiProfileAttrs_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMultiProfileAttrs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMultiProfileAttrs_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ATTRS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("profileAttrsList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addMultiProfileAttrs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addMultiProfileAttrs_argsTupleSchemeFactory());
    }

    public List<ProfileAttribute> profileAttrsList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ATTRS_LIST((short)1, "profileAttrsList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ATTRS_LIST
            return PROFILE_ATTRS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ATTRS_LIST, new org.apache.thrift.meta_data.FieldMetaData("profileAttrsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileAttribute.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMultiProfileAttrs_args.class, metaDataMap);
    }

    public addMultiProfileAttrs_args() {
    }

    public addMultiProfileAttrs_args(
      List<ProfileAttribute> profileAttrsList)
    {
      this();
      this.profileAttrsList = profileAttrsList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMultiProfileAttrs_args(addMultiProfileAttrs_args other) {
      if (other.isSetProfileAttrsList()) {
        List<ProfileAttribute> __this__profileAttrsList = new ArrayList<ProfileAttribute>(other.profileAttrsList.size());
        for (ProfileAttribute other_element : other.profileAttrsList) {
          __this__profileAttrsList.add(new ProfileAttribute(other_element));
        }
        this.profileAttrsList = __this__profileAttrsList;
      }
    }

    public addMultiProfileAttrs_args deepCopy() {
      return new addMultiProfileAttrs_args(this);
    }

    @Override
    public void clear() {
      this.profileAttrsList = null;
    }

    public int getProfileAttrsListSize() {
      return (this.profileAttrsList == null) ? 0 : this.profileAttrsList.size();
    }

    public java.util.Iterator<ProfileAttribute> getProfileAttrsListIterator() {
      return (this.profileAttrsList == null) ? null : this.profileAttrsList.iterator();
    }

    public void addToProfileAttrsList(ProfileAttribute elem) {
      if (this.profileAttrsList == null) {
        this.profileAttrsList = new ArrayList<ProfileAttribute>();
      }
      this.profileAttrsList.add(elem);
    }

    public List<ProfileAttribute> getProfileAttrsList() {
      return this.profileAttrsList;
    }

    public addMultiProfileAttrs_args setProfileAttrsList(List<ProfileAttribute> profileAttrsList) {
      this.profileAttrsList = profileAttrsList;
      return this;
    }

    public void unsetProfileAttrsList() {
      this.profileAttrsList = null;
    }

    /** Returns true if field profileAttrsList is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileAttrsList() {
      return this.profileAttrsList != null;
    }

    public void setProfileAttrsListIsSet(boolean value) {
      if (!value) {
        this.profileAttrsList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ATTRS_LIST:
        if (value == null) {
          unsetProfileAttrsList();
        } else {
          setProfileAttrsList((List<ProfileAttribute>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ATTRS_LIST:
        return getProfileAttrsList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ATTRS_LIST:
        return isSetProfileAttrsList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addMultiProfileAttrs_args)
        return this.equals((addMultiProfileAttrs_args)that);
      return false;
    }

    public boolean equals(addMultiProfileAttrs_args that) {
      if (that == null)
        return false;

      boolean this_present_profileAttrsList = true && this.isSetProfileAttrsList();
      boolean that_present_profileAttrsList = true && that.isSetProfileAttrsList();
      if (this_present_profileAttrsList || that_present_profileAttrsList) {
        if (!(this_present_profileAttrsList && that_present_profileAttrsList))
          return false;
        if (!this.profileAttrsList.equals(that.profileAttrsList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileAttrsList = true && (isSetProfileAttrsList());
      list.add(present_profileAttrsList);
      if (present_profileAttrsList)
        list.add(profileAttrsList);

      return list.hashCode();
    }

    @Override
    public int compareTo(addMultiProfileAttrs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileAttrsList()).compareTo(other.isSetProfileAttrsList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileAttrsList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileAttrsList, other.profileAttrsList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addMultiProfileAttrs_args(");
      boolean first = true;

      sb.append("profileAttrsList:");
      if (this.profileAttrsList == null) {
        sb.append("null");
      } else {
        sb.append(this.profileAttrsList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMultiProfileAttrs_argsStandardSchemeFactory implements SchemeFactory {
      public addMultiProfileAttrs_argsStandardScheme getScheme() {
        return new addMultiProfileAttrs_argsStandardScheme();
      }
    }

    private static class addMultiProfileAttrs_argsStandardScheme extends StandardScheme<addMultiProfileAttrs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ATTRS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.profileAttrsList = new ArrayList<ProfileAttribute>(_list16.size);
                  ProfileAttribute _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new ProfileAttribute();
                    _elem17.read(iprot);
                    struct.profileAttrsList.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileAttrsListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileAttrsList != null) {
          oprot.writeFieldBegin(PROFILE_ATTRS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.profileAttrsList.size()));
            for (ProfileAttribute _iter19 : struct.profileAttrsList)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMultiProfileAttrs_argsTupleSchemeFactory implements SchemeFactory {
      public addMultiProfileAttrs_argsTupleScheme getScheme() {
        return new addMultiProfileAttrs_argsTupleScheme();
      }
    }

    private static class addMultiProfileAttrs_argsTupleScheme extends TupleScheme<addMultiProfileAttrs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileAttrsList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileAttrsList()) {
          {
            oprot.writeI32(struct.profileAttrsList.size());
            for (ProfileAttribute _iter20 : struct.profileAttrsList)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.profileAttrsList = new ArrayList<ProfileAttribute>(_list21.size);
            ProfileAttribute _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new ProfileAttribute();
              _elem22.read(iprot);
              struct.profileAttrsList.add(_elem22);
            }
          }
          struct.setProfileAttrsListIsSet(true);
        }
      }
    }

  }

  public static class getProfileAttr_args implements org.apache.thrift.TBase<getProfileAttr_args, getProfileAttr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileAttr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileAttr_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("profileId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileAttr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileAttr_argsTupleSchemeFactory());
    }

    public String profileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ID((short)1, "profileId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ID
            return PROFILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ID, new org.apache.thrift.meta_data.FieldMetaData("profileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileAttr_args.class, metaDataMap);
    }

    public getProfileAttr_args() {
    }

    public getProfileAttr_args(
      String profileId)
    {
      this();
      this.profileId = profileId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileAttr_args(getProfileAttr_args other) {
      if (other.isSetProfileId()) {
        this.profileId = other.profileId;
      }
    }

    public getProfileAttr_args deepCopy() {
      return new getProfileAttr_args(this);
    }

    @Override
    public void clear() {
      this.profileId = null;
    }

    public String getProfileId() {
      return this.profileId;
    }

    public getProfileAttr_args setProfileId(String profileId) {
      this.profileId = profileId;
      return this;
    }

    public void unsetProfileId() {
      this.profileId = null;
    }

    /** Returns true if field profileId is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileId() {
      return this.profileId != null;
    }

    public void setProfileIdIsSet(boolean value) {
      if (!value) {
        this.profileId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ID:
        if (value == null) {
          unsetProfileId();
        } else {
          setProfileId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ID:
        return getProfileId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ID:
        return isSetProfileId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileAttr_args)
        return this.equals((getProfileAttr_args)that);
      return false;
    }

    public boolean equals(getProfileAttr_args that) {
      if (that == null)
        return false;

      boolean this_present_profileId = true && this.isSetProfileId();
      boolean that_present_profileId = true && that.isSetProfileId();
      if (this_present_profileId || that_present_profileId) {
        if (!(this_present_profileId && that_present_profileId))
          return false;
        if (!this.profileId.equals(that.profileId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileId = true && (isSetProfileId());
      list.add(present_profileId);
      if (present_profileId)
        list.add(profileId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileAttr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileId()).compareTo(other.isSetProfileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileId, other.profileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileAttr_args(");
      boolean first = true;

      sb.append("profileId:");
      if (this.profileId == null) {
        sb.append("null");
      } else {
        sb.append(this.profileId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileAttr_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileAttr_argsStandardScheme getScheme() {
        return new getProfileAttr_argsStandardScheme();
      }
    }

    private static class getProfileAttr_argsStandardScheme extends StandardScheme<getProfileAttr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileAttr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.profileId = iprot.readString();
                struct.setProfileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileAttr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileId != null) {
          oprot.writeFieldBegin(PROFILE_ID_FIELD_DESC);
          oprot.writeString(struct.profileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileAttr_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileAttr_argsTupleScheme getScheme() {
        return new getProfileAttr_argsTupleScheme();
      }
    }

    private static class getProfileAttr_argsTupleScheme extends TupleScheme<getProfileAttr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileId()) {
          oprot.writeString(struct.profileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileAttr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.profileId = iprot.readString();
          struct.setProfileIdIsSet(true);
        }
      }
    }

  }

  public static class getProfileAttr_result implements org.apache.thrift.TBase<getProfileAttr_result, getProfileAttr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileAttr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileAttr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileAttr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileAttr_resultTupleSchemeFactory());
    }

    public ProfileAttributeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileAttributeResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileAttr_result.class, metaDataMap);
    }

    public getProfileAttr_result() {
    }

    public getProfileAttr_result(
      ProfileAttributeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileAttr_result(getProfileAttr_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProfileAttributeResult(other.success);
      }
    }

    public getProfileAttr_result deepCopy() {
      return new getProfileAttr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ProfileAttributeResult getSuccess() {
      return this.success;
    }

    public getProfileAttr_result setSuccess(ProfileAttributeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProfileAttributeResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileAttr_result)
        return this.equals((getProfileAttr_result)that);
      return false;
    }

    public boolean equals(getProfileAttr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProfileAttr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileAttr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileAttr_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileAttr_resultStandardScheme getScheme() {
        return new getProfileAttr_resultStandardScheme();
      }
    }

    private static class getProfileAttr_resultStandardScheme extends StandardScheme<getProfileAttr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileAttr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProfileAttributeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileAttr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileAttr_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileAttr_resultTupleScheme getScheme() {
        return new getProfileAttr_resultTupleScheme();
      }
    }

    private static class getProfileAttr_resultTupleScheme extends TupleScheme<getProfileAttr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileAttr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ProfileAttributeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMultiProfileAttrs_args implements org.apache.thrift.TBase<getMultiProfileAttrs_args, getMultiProfileAttrs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiProfileAttrs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiProfileAttrs_args");

    private static final org.apache.thrift.protocol.TField PROFILE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("profileIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiProfileAttrs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiProfileAttrs_argsTupleSchemeFactory());
    }

    public List<String> profileIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROFILE_ID_LIST((short)1, "profileIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROFILE_ID_LIST
            return PROFILE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROFILE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("profileIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiProfileAttrs_args.class, metaDataMap);
    }

    public getMultiProfileAttrs_args() {
    }

    public getMultiProfileAttrs_args(
      List<String> profileIdList)
    {
      this();
      this.profileIdList = profileIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiProfileAttrs_args(getMultiProfileAttrs_args other) {
      if (other.isSetProfileIdList()) {
        List<String> __this__profileIdList = new ArrayList<String>(other.profileIdList);
        this.profileIdList = __this__profileIdList;
      }
    }

    public getMultiProfileAttrs_args deepCopy() {
      return new getMultiProfileAttrs_args(this);
    }

    @Override
    public void clear() {
      this.profileIdList = null;
    }

    public int getProfileIdListSize() {
      return (this.profileIdList == null) ? 0 : this.profileIdList.size();
    }

    public java.util.Iterator<String> getProfileIdListIterator() {
      return (this.profileIdList == null) ? null : this.profileIdList.iterator();
    }

    public void addToProfileIdList(String elem) {
      if (this.profileIdList == null) {
        this.profileIdList = new ArrayList<String>();
      }
      this.profileIdList.add(elem);
    }

    public List<String> getProfileIdList() {
      return this.profileIdList;
    }

    public getMultiProfileAttrs_args setProfileIdList(List<String> profileIdList) {
      this.profileIdList = profileIdList;
      return this;
    }

    public void unsetProfileIdList() {
      this.profileIdList = null;
    }

    /** Returns true if field profileIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileIdList() {
      return this.profileIdList != null;
    }

    public void setProfileIdListIsSet(boolean value) {
      if (!value) {
        this.profileIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROFILE_ID_LIST:
        if (value == null) {
          unsetProfileIdList();
        } else {
          setProfileIdList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROFILE_ID_LIST:
        return getProfileIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROFILE_ID_LIST:
        return isSetProfileIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiProfileAttrs_args)
        return this.equals((getMultiProfileAttrs_args)that);
      return false;
    }

    public boolean equals(getMultiProfileAttrs_args that) {
      if (that == null)
        return false;

      boolean this_present_profileIdList = true && this.isSetProfileIdList();
      boolean that_present_profileIdList = true && that.isSetProfileIdList();
      if (this_present_profileIdList || that_present_profileIdList) {
        if (!(this_present_profileIdList && that_present_profileIdList))
          return false;
        if (!this.profileIdList.equals(that.profileIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_profileIdList = true && (isSetProfileIdList());
      list.add(present_profileIdList);
      if (present_profileIdList)
        list.add(profileIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiProfileAttrs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProfileIdList()).compareTo(other.isSetProfileIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileIdList, other.profileIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiProfileAttrs_args(");
      boolean first = true;

      sb.append("profileIdList:");
      if (this.profileIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.profileIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiProfileAttrs_argsStandardSchemeFactory implements SchemeFactory {
      public getMultiProfileAttrs_argsStandardScheme getScheme() {
        return new getMultiProfileAttrs_argsStandardScheme();
      }
    }

    private static class getMultiProfileAttrs_argsStandardScheme extends StandardScheme<getMultiProfileAttrs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROFILE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.profileIdList = new ArrayList<String>(_list24.size);
                  String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.profileIdList.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setProfileIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.profileIdList != null) {
          oprot.writeFieldBegin(PROFILE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.profileIdList.size()));
            for (String _iter27 : struct.profileIdList)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiProfileAttrs_argsTupleSchemeFactory implements SchemeFactory {
      public getMultiProfileAttrs_argsTupleScheme getScheme() {
        return new getMultiProfileAttrs_argsTupleScheme();
      }
    }

    private static class getMultiProfileAttrs_argsTupleScheme extends TupleScheme<getMultiProfileAttrs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProfileIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProfileIdList()) {
          {
            oprot.writeI32(struct.profileIdList.size());
            for (String _iter28 : struct.profileIdList)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiProfileAttrs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.profileIdList = new ArrayList<String>(_list29.size);
            String _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = iprot.readString();
              struct.profileIdList.add(_elem30);
            }
          }
          struct.setProfileIdListIsSet(true);
        }
      }
    }

  }

  public static class getMultiProfileAttrs_result implements org.apache.thrift.TBase<getMultiProfileAttrs_result, getMultiProfileAttrs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiProfileAttrs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiProfileAttrs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiProfileAttrs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiProfileAttrs_resultTupleSchemeFactory());
    }

    public MultiProfileAttributeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiProfileAttributeResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiProfileAttrs_result.class, metaDataMap);
    }

    public getMultiProfileAttrs_result() {
    }

    public getMultiProfileAttrs_result(
      MultiProfileAttributeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiProfileAttrs_result(getMultiProfileAttrs_result other) {
      if (other.isSetSuccess()) {
        this.success = new MultiProfileAttributeResult(other.success);
      }
    }

    public getMultiProfileAttrs_result deepCopy() {
      return new getMultiProfileAttrs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MultiProfileAttributeResult getSuccess() {
      return this.success;
    }

    public getMultiProfileAttrs_result setSuccess(MultiProfileAttributeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MultiProfileAttributeResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiProfileAttrs_result)
        return this.equals((getMultiProfileAttrs_result)that);
      return false;
    }

    public boolean equals(getMultiProfileAttrs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiProfileAttrs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiProfileAttrs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiProfileAttrs_resultStandardSchemeFactory implements SchemeFactory {
      public getMultiProfileAttrs_resultStandardScheme getScheme() {
        return new getMultiProfileAttrs_resultStandardScheme();
      }
    }

    private static class getMultiProfileAttrs_resultStandardScheme extends StandardScheme<getMultiProfileAttrs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiProfileAttrs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MultiProfileAttributeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiProfileAttrs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiProfileAttrs_resultTupleSchemeFactory implements SchemeFactory {
      public getMultiProfileAttrs_resultTupleScheme getScheme() {
        return new getMultiProfileAttrs_resultTupleScheme();
      }
    }

    private static class getMultiProfileAttrs_resultTupleScheme extends TupleScheme<getMultiProfileAttrs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiProfileAttrs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiProfileAttrs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MultiProfileAttributeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addTag_args implements org.apache.thrift.TBase<addTag_args, addTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTag_args");

    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTag_argsTupleSchemeFactory());
    }

    public TagDB tag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG((short)1, "tag");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG
            return TAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TagDB.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTag_args.class, metaDataMap);
    }

    public addTag_args() {
    }

    public addTag_args(
      TagDB tag)
    {
      this();
      this.tag = tag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTag_args(addTag_args other) {
      if (other.isSetTag()) {
        this.tag = new TagDB(other.tag);
      }
    }

    public addTag_args deepCopy() {
      return new addTag_args(this);
    }

    @Override
    public void clear() {
      this.tag = null;
    }

    public TagDB getTag() {
      return this.tag;
    }

    public addTag_args setTag(TagDB tag) {
      this.tag = tag;
      return this;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((TagDB)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG:
        return getTag();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG:
        return isSetTag();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTag_args)
        return this.equals((addTag_args)that);
      return false;
    }

    public boolean equals(addTag_args that) {
      if (that == null)
        return false;

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tag = true && (isSetTag());
      list.add(present_tag);
      if (present_tag)
        list.add(tag);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTag()).compareTo(other.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, other.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTag_args(");
      boolean first = true;

      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tag != null) {
        tag.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTag_argsStandardSchemeFactory implements SchemeFactory {
      public addTag_argsStandardScheme getScheme() {
        return new addTag_argsStandardScheme();
      }
    }

    private static class addTag_argsStandardScheme extends StandardScheme<addTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tag = new TagDB();
                struct.tag.read(iprot);
                struct.setTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tag != null) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          struct.tag.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTag_argsTupleSchemeFactory implements SchemeFactory {
      public addTag_argsTupleScheme getScheme() {
        return new addTag_argsTupleScheme();
      }
    }

    private static class addTag_argsTupleScheme extends TupleScheme<addTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTag()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTag()) {
          struct.tag.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tag = new TagDB();
          struct.tag.read(iprot);
          struct.setTagIsSet(true);
        }
      }
    }

  }

  public static class addTag_result implements org.apache.thrift.TBase<addTag_result, addTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTag_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTag_result.class, metaDataMap);
    }

    public addTag_result() {
    }

    public addTag_result(
      ReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTag_result(addTag_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addTag_result deepCopy() {
      return new addTag_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ReturnCode
     */
    public addTag_result setSuccess(ReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTag_result)
        return this.equals((addTag_result)that);
      return false;
    }

    public boolean equals(addTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTag_resultStandardSchemeFactory implements SchemeFactory {
      public addTag_resultStandardScheme getScheme() {
        return new addTag_resultStandardScheme();
      }
    }

    private static class addTag_resultStandardScheme extends StandardScheme<addTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTag_resultTupleSchemeFactory implements SchemeFactory {
      public addTag_resultTupleScheme getScheme() {
        return new addTag_resultTupleScheme();
      }
    }

    private static class addTag_resultTupleScheme extends TupleScheme<addTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addTagGroup_args implements org.apache.thrift.TBase<addTagGroup_args, addTagGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<addTagGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTagGroup_args");

    private static final org.apache.thrift.protocol.TField TAG_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("tagGroup", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTagGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTagGroup_argsTupleSchemeFactory());
    }

    public GroupDB tagGroup; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_GROUP((short)1, "tagGroup");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_GROUP
            return TAG_GROUP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_GROUP, new org.apache.thrift.meta_data.FieldMetaData("tagGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupDB.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTagGroup_args.class, metaDataMap);
    }

    public addTagGroup_args() {
    }

    public addTagGroup_args(
      GroupDB tagGroup)
    {
      this();
      this.tagGroup = tagGroup;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTagGroup_args(addTagGroup_args other) {
      if (other.isSetTagGroup()) {
        this.tagGroup = new GroupDB(other.tagGroup);
      }
    }

    public addTagGroup_args deepCopy() {
      return new addTagGroup_args(this);
    }

    @Override
    public void clear() {
      this.tagGroup = null;
    }

    public GroupDB getTagGroup() {
      return this.tagGroup;
    }

    public addTagGroup_args setTagGroup(GroupDB tagGroup) {
      this.tagGroup = tagGroup;
      return this;
    }

    public void unsetTagGroup() {
      this.tagGroup = null;
    }

    /** Returns true if field tagGroup is set (has been assigned a value) and false otherwise */
    public boolean isSetTagGroup() {
      return this.tagGroup != null;
    }

    public void setTagGroupIsSet(boolean value) {
      if (!value) {
        this.tagGroup = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_GROUP:
        if (value == null) {
          unsetTagGroup();
        } else {
          setTagGroup((GroupDB)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_GROUP:
        return getTagGroup();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_GROUP:
        return isSetTagGroup();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTagGroup_args)
        return this.equals((addTagGroup_args)that);
      return false;
    }

    public boolean equals(addTagGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_tagGroup = true && this.isSetTagGroup();
      boolean that_present_tagGroup = true && that.isSetTagGroup();
      if (this_present_tagGroup || that_present_tagGroup) {
        if (!(this_present_tagGroup && that_present_tagGroup))
          return false;
        if (!this.tagGroup.equals(that.tagGroup))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagGroup = true && (isSetTagGroup());
      list.add(present_tagGroup);
      if (present_tagGroup)
        list.add(tagGroup);

      return list.hashCode();
    }

    @Override
    public int compareTo(addTagGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagGroup()).compareTo(other.isSetTagGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagGroup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagGroup, other.tagGroup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTagGroup_args(");
      boolean first = true;

      sb.append("tagGroup:");
      if (this.tagGroup == null) {
        sb.append("null");
      } else {
        sb.append(this.tagGroup);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tagGroup != null) {
        tagGroup.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTagGroup_argsStandardSchemeFactory implements SchemeFactory {
      public addTagGroup_argsStandardScheme getScheme() {
        return new addTagGroup_argsStandardScheme();
      }
    }

    private static class addTagGroup_argsStandardScheme extends StandardScheme<addTagGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTagGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_GROUP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tagGroup = new GroupDB();
                struct.tagGroup.read(iprot);
                struct.setTagGroupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTagGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagGroup != null) {
          oprot.writeFieldBegin(TAG_GROUP_FIELD_DESC);
          struct.tagGroup.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTagGroup_argsTupleSchemeFactory implements SchemeFactory {
      public addTagGroup_argsTupleScheme getScheme() {
        return new addTagGroup_argsTupleScheme();
      }
    }

    private static class addTagGroup_argsTupleScheme extends TupleScheme<addTagGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTagGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagGroup()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagGroup()) {
          struct.tagGroup.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTagGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tagGroup = new GroupDB();
          struct.tagGroup.read(iprot);
          struct.setTagGroupIsSet(true);
        }
      }
    }

  }

  public static class addTagGroup_result implements org.apache.thrift.TBase<addTagGroup_result, addTagGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<addTagGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addTagGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addTagGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addTagGroup_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addTagGroup_result.class, metaDataMap);
    }

    public addTagGroup_result() {
    }

    public addTagGroup_result(
      ReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addTagGroup_result(addTagGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addTagGroup_result deepCopy() {
      return new addTagGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ReturnCode
     */
    public addTagGroup_result setSuccess(ReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addTagGroup_result)
        return this.equals((addTagGroup_result)that);
      return false;
    }

    public boolean equals(addTagGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addTagGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addTagGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addTagGroup_resultStandardSchemeFactory implements SchemeFactory {
      public addTagGroup_resultStandardScheme getScheme() {
        return new addTagGroup_resultStandardScheme();
      }
    }

    private static class addTagGroup_resultStandardScheme extends StandardScheme<addTagGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addTagGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addTagGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addTagGroup_resultTupleSchemeFactory implements SchemeFactory {
      public addTagGroup_resultTupleScheme getScheme() {
        return new addTagGroup_resultTupleScheme();
      }
    }

    private static class addTagGroup_resultTupleScheme extends TupleScheme<addTagGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addTagGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addTagGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addSource_args implements org.apache.thrift.TBase<addSource_args, addSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSource_args");

    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSource_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSource_argsTupleSchemeFactory());
    }

    public SourceDB source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE((short)1, "source");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SourceDB.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSource_args.class, metaDataMap);
    }

    public addSource_args() {
    }

    public addSource_args(
      SourceDB source)
    {
      this();
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSource_args(addSource_args other) {
      if (other.isSetSource()) {
        this.source = new SourceDB(other.source);
      }
    }

    public addSource_args deepCopy() {
      return new addSource_args(this);
    }

    @Override
    public void clear() {
      this.source = null;
    }

    public SourceDB getSource() {
      return this.source;
    }

    public addSource_args setSource(SourceDB source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((SourceDB)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE:
        return getSource();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE:
        return isSetSource();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSource_args)
        return this.equals((addSource_args)that);
      return false;
    }

    public boolean equals(addSource_args that) {
      if (that == null)
        return false;

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_source = true && (isSetSource());
      list.add(present_source);
      if (present_source)
        list.add(source);

      return list.hashCode();
    }

    @Override
    public int compareTo(addSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSource_args(");
      boolean first = true;

      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (source != null) {
        source.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSource_argsStandardSchemeFactory implements SchemeFactory {
      public addSource_argsStandardScheme getScheme() {
        return new addSource_argsStandardScheme();
      }
    }

    private static class addSource_argsStandardScheme extends StandardScheme<addSource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.source = new SourceDB();
                struct.source.read(iprot);
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          struct.source.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSource_argsTupleSchemeFactory implements SchemeFactory {
      public addSource_argsTupleScheme getScheme() {
        return new addSource_argsTupleScheme();
      }
    }

    private static class addSource_argsTupleScheme extends TupleScheme<addSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSource()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSource()) {
          struct.source.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSource_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.source = new SourceDB();
          struct.source.read(iprot);
          struct.setSourceIsSet(true);
        }
      }
    }

  }

  public static class addSource_result implements org.apache.thrift.TBase<addSource_result, addSource_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addSource_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addSource_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSource_result.class, metaDataMap);
    }

    public addSource_result() {
    }

    public addSource_result(
      ReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSource_result(addSource_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addSource_result deepCopy() {
      return new addSource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ReturnCode
     */
    public addSource_result setSuccess(ReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSource_result)
        return this.equals((addSource_result)that);
      return false;
    }

    public boolean equals(addSource_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addSource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addSource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSource_resultStandardSchemeFactory implements SchemeFactory {
      public addSource_resultStandardScheme getScheme() {
        return new addSource_resultStandardScheme();
      }
    }

    private static class addSource_resultStandardScheme extends StandardScheme<addSource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSource_resultTupleSchemeFactory implements SchemeFactory {
      public addSource_resultTupleScheme getScheme() {
        return new addSource_resultTupleScheme();
      }
    }

    private static class addSource_resultTupleScheme extends TupleScheme<addSource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSource_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addAttribute_args implements org.apache.thrift.TBase<addAttribute_args, addAttribute_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAttribute_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAttribute_args");

    private static final org.apache.thrift.protocol.TField ATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAttribute_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAttribute_argsTupleSchemeFactory());
    }

    public AttributeDB attribute; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTRIBUTE((short)1, "attribute");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTRIBUTE
            return ATTRIBUTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("attribute", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AttributeDB.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAttribute_args.class, metaDataMap);
    }

    public addAttribute_args() {
    }

    public addAttribute_args(
      AttributeDB attribute)
    {
      this();
      this.attribute = attribute;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAttribute_args(addAttribute_args other) {
      if (other.isSetAttribute()) {
        this.attribute = new AttributeDB(other.attribute);
      }
    }

    public addAttribute_args deepCopy() {
      return new addAttribute_args(this);
    }

    @Override
    public void clear() {
      this.attribute = null;
    }

    public AttributeDB getAttribute() {
      return this.attribute;
    }

    public addAttribute_args setAttribute(AttributeDB attribute) {
      this.attribute = attribute;
      return this;
    }

    public void unsetAttribute() {
      this.attribute = null;
    }

    /** Returns true if field attribute is set (has been assigned a value) and false otherwise */
    public boolean isSetAttribute() {
      return this.attribute != null;
    }

    public void setAttributeIsSet(boolean value) {
      if (!value) {
        this.attribute = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTRIBUTE:
        if (value == null) {
          unsetAttribute();
        } else {
          setAttribute((AttributeDB)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTRIBUTE:
        return getAttribute();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTRIBUTE:
        return isSetAttribute();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAttribute_args)
        return this.equals((addAttribute_args)that);
      return false;
    }

    public boolean equals(addAttribute_args that) {
      if (that == null)
        return false;

      boolean this_present_attribute = true && this.isSetAttribute();
      boolean that_present_attribute = true && that.isSetAttribute();
      if (this_present_attribute || that_present_attribute) {
        if (!(this_present_attribute && that_present_attribute))
          return false;
        if (!this.attribute.equals(that.attribute))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attribute = true && (isSetAttribute());
      list.add(present_attribute);
      if (present_attribute)
        list.add(attribute);

      return list.hashCode();
    }

    @Override
    public int compareTo(addAttribute_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttribute()).compareTo(other.isSetAttribute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttribute()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute, other.attribute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAttribute_args(");
      boolean first = true;

      sb.append("attribute:");
      if (this.attribute == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (attribute != null) {
        attribute.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAttribute_argsStandardSchemeFactory implements SchemeFactory {
      public addAttribute_argsStandardScheme getScheme() {
        return new addAttribute_argsStandardScheme();
      }
    }

    private static class addAttribute_argsStandardScheme extends StandardScheme<addAttribute_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAttribute_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTRIBUTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attribute = new AttributeDB();
                struct.attribute.read(iprot);
                struct.setAttributeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAttribute_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.attribute != null) {
          oprot.writeFieldBegin(ATTRIBUTE_FIELD_DESC);
          struct.attribute.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAttribute_argsTupleSchemeFactory implements SchemeFactory {
      public addAttribute_argsTupleScheme getScheme() {
        return new addAttribute_argsTupleScheme();
      }
    }

    private static class addAttribute_argsTupleScheme extends TupleScheme<addAttribute_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttribute()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAttribute()) {
          struct.attribute.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAttribute_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.attribute = new AttributeDB();
          struct.attribute.read(iprot);
          struct.setAttributeIsSet(true);
        }
      }
    }

  }

  public static class addAttribute_result implements org.apache.thrift.TBase<addAttribute_result, addAttribute_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAttribute_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAttribute_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAttribute_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAttribute_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see ReturnCode
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReturnCode.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAttribute_result.class, metaDataMap);
    }

    public addAttribute_result() {
    }

    public addAttribute_result(
      ReturnCode success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAttribute_result(addAttribute_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addAttribute_result deepCopy() {
      return new addAttribute_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see ReturnCode
     */
    public ReturnCode getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see ReturnCode
     */
    public addAttribute_result setSuccess(ReturnCode success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnCode)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAttribute_result)
        return this.equals((addAttribute_result)that);
      return false;
    }

    public boolean equals(addAttribute_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addAttribute_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAttribute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAttribute_resultStandardSchemeFactory implements SchemeFactory {
      public addAttribute_resultStandardScheme getScheme() {
        return new addAttribute_resultStandardScheme();
      }
    }

    private static class addAttribute_resultStandardScheme extends StandardScheme<addAttribute_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAttribute_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = ReturnCode.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAttribute_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAttribute_resultTupleSchemeFactory implements SchemeFactory {
      public addAttribute_resultTupleScheme getScheme() {
        return new addAttribute_resultTupleScheme();
      }
    }

    private static class addAttribute_resultTupleScheme extends TupleScheme<addAttribute_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAttribute_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = ReturnCode.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMultiTags_args implements org.apache.thrift.TBase<getMultiTags_args, getMultiTags_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiTags_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiTags_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tagIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiTags_argsTupleSchemeFactory());
    }

    public List<Integer> tagIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID_LIST((short)1, "tagIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID_LIST
            return TAG_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("tagIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiTags_args.class, metaDataMap);
    }

    public getMultiTags_args() {
    }

    public getMultiTags_args(
      List<Integer> tagIdList)
    {
      this();
      this.tagIdList = tagIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiTags_args(getMultiTags_args other) {
      if (other.isSetTagIdList()) {
        List<Integer> __this__tagIdList = new ArrayList<Integer>(other.tagIdList);
        this.tagIdList = __this__tagIdList;
      }
    }

    public getMultiTags_args deepCopy() {
      return new getMultiTags_args(this);
    }

    @Override
    public void clear() {
      this.tagIdList = null;
    }

    public int getTagIdListSize() {
      return (this.tagIdList == null) ? 0 : this.tagIdList.size();
    }

    public java.util.Iterator<Integer> getTagIdListIterator() {
      return (this.tagIdList == null) ? null : this.tagIdList.iterator();
    }

    public void addToTagIdList(int elem) {
      if (this.tagIdList == null) {
        this.tagIdList = new ArrayList<Integer>();
      }
      this.tagIdList.add(elem);
    }

    public List<Integer> getTagIdList() {
      return this.tagIdList;
    }

    public getMultiTags_args setTagIdList(List<Integer> tagIdList) {
      this.tagIdList = tagIdList;
      return this;
    }

    public void unsetTagIdList() {
      this.tagIdList = null;
    }

    /** Returns true if field tagIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetTagIdList() {
      return this.tagIdList != null;
    }

    public void setTagIdListIsSet(boolean value) {
      if (!value) {
        this.tagIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID_LIST:
        if (value == null) {
          unsetTagIdList();
        } else {
          setTagIdList((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID_LIST:
        return getTagIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID_LIST:
        return isSetTagIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiTags_args)
        return this.equals((getMultiTags_args)that);
      return false;
    }

    public boolean equals(getMultiTags_args that) {
      if (that == null)
        return false;

      boolean this_present_tagIdList = true && this.isSetTagIdList();
      boolean that_present_tagIdList = true && that.isSetTagIdList();
      if (this_present_tagIdList || that_present_tagIdList) {
        if (!(this_present_tagIdList && that_present_tagIdList))
          return false;
        if (!this.tagIdList.equals(that.tagIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagIdList = true && (isSetTagIdList());
      list.add(present_tagIdList);
      if (present_tagIdList)
        list.add(tagIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagIdList()).compareTo(other.isSetTagIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagIdList, other.tagIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiTags_args(");
      boolean first = true;

      sb.append("tagIdList:");
      if (this.tagIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.tagIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiTags_argsStandardSchemeFactory implements SchemeFactory {
      public getMultiTags_argsStandardScheme getScheme() {
        return new getMultiTags_argsStandardScheme();
      }
    }

    private static class getMultiTags_argsStandardScheme extends StandardScheme<getMultiTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.tagIdList = new ArrayList<Integer>(_list32.size);
                  int _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = iprot.readI32();
                    struct.tagIdList.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setTagIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagIdList != null) {
          oprot.writeFieldBegin(TAG_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.tagIdList.size()));
            for (int _iter35 : struct.tagIdList)
            {
              oprot.writeI32(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiTags_argsTupleSchemeFactory implements SchemeFactory {
      public getMultiTags_argsTupleScheme getScheme() {
        return new getMultiTags_argsTupleScheme();
      }
    }

    private static class getMultiTags_argsTupleScheme extends TupleScheme<getMultiTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagIdList()) {
          {
            oprot.writeI32(struct.tagIdList.size());
            for (int _iter36 : struct.tagIdList)
            {
              oprot.writeI32(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.tagIdList = new ArrayList<Integer>(_list37.size);
            int _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = iprot.readI32();
              struct.tagIdList.add(_elem38);
            }
          }
          struct.setTagIdListIsSet(true);
        }
      }
    }

  }

  public static class getMultiTags_result implements org.apache.thrift.TBase<getMultiTags_result, getMultiTags_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiTags_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiTags_resultTupleSchemeFactory());
    }

    public MultiTagResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiTagResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiTags_result.class, metaDataMap);
    }

    public getMultiTags_result() {
    }

    public getMultiTags_result(
      MultiTagResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiTags_result(getMultiTags_result other) {
      if (other.isSetSuccess()) {
        this.success = new MultiTagResult(other.success);
      }
    }

    public getMultiTags_result deepCopy() {
      return new getMultiTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MultiTagResult getSuccess() {
      return this.success;
    }

    public getMultiTags_result setSuccess(MultiTagResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MultiTagResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiTags_result)
        return this.equals((getMultiTags_result)that);
      return false;
    }

    public boolean equals(getMultiTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiTags_resultStandardSchemeFactory implements SchemeFactory {
      public getMultiTags_resultStandardScheme getScheme() {
        return new getMultiTags_resultStandardScheme();
      }
    }

    private static class getMultiTags_resultStandardScheme extends StandardScheme<getMultiTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MultiTagResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiTags_resultTupleSchemeFactory implements SchemeFactory {
      public getMultiTags_resultTupleScheme getScheme() {
        return new getMultiTags_resultTupleScheme();
      }
    }

    private static class getMultiTags_resultTupleScheme extends TupleScheme<getMultiTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MultiTagResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMultiGroups_args implements org.apache.thrift.TBase<getMultiGroups_args, getMultiGroups_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiGroups_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiGroups_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("groupIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiGroups_argsTupleSchemeFactory());
    }

    public List<Integer> groupIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID_LIST((short)1, "groupIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID_LIST
            return GROUP_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("groupIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiGroups_args.class, metaDataMap);
    }

    public getMultiGroups_args() {
    }

    public getMultiGroups_args(
      List<Integer> groupIdList)
    {
      this();
      this.groupIdList = groupIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiGroups_args(getMultiGroups_args other) {
      if (other.isSetGroupIdList()) {
        List<Integer> __this__groupIdList = new ArrayList<Integer>(other.groupIdList);
        this.groupIdList = __this__groupIdList;
      }
    }

    public getMultiGroups_args deepCopy() {
      return new getMultiGroups_args(this);
    }

    @Override
    public void clear() {
      this.groupIdList = null;
    }

    public int getGroupIdListSize() {
      return (this.groupIdList == null) ? 0 : this.groupIdList.size();
    }

    public java.util.Iterator<Integer> getGroupIdListIterator() {
      return (this.groupIdList == null) ? null : this.groupIdList.iterator();
    }

    public void addToGroupIdList(int elem) {
      if (this.groupIdList == null) {
        this.groupIdList = new ArrayList<Integer>();
      }
      this.groupIdList.add(elem);
    }

    public List<Integer> getGroupIdList() {
      return this.groupIdList;
    }

    public getMultiGroups_args setGroupIdList(List<Integer> groupIdList) {
      this.groupIdList = groupIdList;
      return this;
    }

    public void unsetGroupIdList() {
      this.groupIdList = null;
    }

    /** Returns true if field groupIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupIdList() {
      return this.groupIdList != null;
    }

    public void setGroupIdListIsSet(boolean value) {
      if (!value) {
        this.groupIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID_LIST:
        if (value == null) {
          unsetGroupIdList();
        } else {
          setGroupIdList((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID_LIST:
        return getGroupIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID_LIST:
        return isSetGroupIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiGroups_args)
        return this.equals((getMultiGroups_args)that);
      return false;
    }

    public boolean equals(getMultiGroups_args that) {
      if (that == null)
        return false;

      boolean this_present_groupIdList = true && this.isSetGroupIdList();
      boolean that_present_groupIdList = true && that.isSetGroupIdList();
      if (this_present_groupIdList || that_present_groupIdList) {
        if (!(this_present_groupIdList && that_present_groupIdList))
          return false;
        if (!this.groupIdList.equals(that.groupIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_groupIdList = true && (isSetGroupIdList());
      list.add(present_groupIdList);
      if (present_groupIdList)
        list.add(groupIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupIdList()).compareTo(other.isSetGroupIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupIdList, other.groupIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiGroups_args(");
      boolean first = true;

      sb.append("groupIdList:");
      if (this.groupIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.groupIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiGroups_argsStandardSchemeFactory implements SchemeFactory {
      public getMultiGroups_argsStandardScheme getScheme() {
        return new getMultiGroups_argsStandardScheme();
      }
    }

    private static class getMultiGroups_argsStandardScheme extends StandardScheme<getMultiGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.groupIdList = new ArrayList<Integer>(_list40.size);
                  int _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readI32();
                    struct.groupIdList.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setGroupIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupIdList != null) {
          oprot.writeFieldBegin(GROUP_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.groupIdList.size()));
            for (int _iter43 : struct.groupIdList)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiGroups_argsTupleSchemeFactory implements SchemeFactory {
      public getMultiGroups_argsTupleScheme getScheme() {
        return new getMultiGroups_argsTupleScheme();
      }
    }

    private static class getMultiGroups_argsTupleScheme extends TupleScheme<getMultiGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupIdList()) {
          {
            oprot.writeI32(struct.groupIdList.size());
            for (int _iter44 : struct.groupIdList)
            {
              oprot.writeI32(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.groupIdList = new ArrayList<Integer>(_list45.size);
            int _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readI32();
              struct.groupIdList.add(_elem46);
            }
          }
          struct.setGroupIdListIsSet(true);
        }
      }
    }

  }

  public static class getMultiGroups_result implements org.apache.thrift.TBase<getMultiGroups_result, getMultiGroups_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiGroups_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiGroups_resultTupleSchemeFactory());
    }

    public MultiGroupResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiGroupResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiGroups_result.class, metaDataMap);
    }

    public getMultiGroups_result() {
    }

    public getMultiGroups_result(
      MultiGroupResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiGroups_result(getMultiGroups_result other) {
      if (other.isSetSuccess()) {
        this.success = new MultiGroupResult(other.success);
      }
    }

    public getMultiGroups_result deepCopy() {
      return new getMultiGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MultiGroupResult getSuccess() {
      return this.success;
    }

    public getMultiGroups_result setSuccess(MultiGroupResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MultiGroupResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiGroups_result)
        return this.equals((getMultiGroups_result)that);
      return false;
    }

    public boolean equals(getMultiGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiGroups_resultStandardSchemeFactory implements SchemeFactory {
      public getMultiGroups_resultStandardScheme getScheme() {
        return new getMultiGroups_resultStandardScheme();
      }
    }

    private static class getMultiGroups_resultStandardScheme extends StandardScheme<getMultiGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MultiGroupResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiGroups_resultTupleSchemeFactory implements SchemeFactory {
      public getMultiGroups_resultTupleScheme getScheme() {
        return new getMultiGroups_resultTupleScheme();
      }
    }

    private static class getMultiGroups_resultTupleScheme extends TupleScheme<getMultiGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MultiGroupResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMultiSources_args implements org.apache.thrift.TBase<getMultiSources_args, getMultiSources_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiSources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiSources_args");

    private static final org.apache.thrift.protocol.TField SOURCE_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiSources_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiSources_argsTupleSchemeFactory());
    }

    public List<Integer> sourceIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SOURCE_ID_LIST((short)1, "sourceIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SOURCE_ID_LIST
            return SOURCE_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SOURCE_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("sourceIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiSources_args.class, metaDataMap);
    }

    public getMultiSources_args() {
    }

    public getMultiSources_args(
      List<Integer> sourceIdList)
    {
      this();
      this.sourceIdList = sourceIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiSources_args(getMultiSources_args other) {
      if (other.isSetSourceIdList()) {
        List<Integer> __this__sourceIdList = new ArrayList<Integer>(other.sourceIdList);
        this.sourceIdList = __this__sourceIdList;
      }
    }

    public getMultiSources_args deepCopy() {
      return new getMultiSources_args(this);
    }

    @Override
    public void clear() {
      this.sourceIdList = null;
    }

    public int getSourceIdListSize() {
      return (this.sourceIdList == null) ? 0 : this.sourceIdList.size();
    }

    public java.util.Iterator<Integer> getSourceIdListIterator() {
      return (this.sourceIdList == null) ? null : this.sourceIdList.iterator();
    }

    public void addToSourceIdList(int elem) {
      if (this.sourceIdList == null) {
        this.sourceIdList = new ArrayList<Integer>();
      }
      this.sourceIdList.add(elem);
    }

    public List<Integer> getSourceIdList() {
      return this.sourceIdList;
    }

    public getMultiSources_args setSourceIdList(List<Integer> sourceIdList) {
      this.sourceIdList = sourceIdList;
      return this;
    }

    public void unsetSourceIdList() {
      this.sourceIdList = null;
    }

    /** Returns true if field sourceIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceIdList() {
      return this.sourceIdList != null;
    }

    public void setSourceIdListIsSet(boolean value) {
      if (!value) {
        this.sourceIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SOURCE_ID_LIST:
        if (value == null) {
          unsetSourceIdList();
        } else {
          setSourceIdList((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SOURCE_ID_LIST:
        return getSourceIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SOURCE_ID_LIST:
        return isSetSourceIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiSources_args)
        return this.equals((getMultiSources_args)that);
      return false;
    }

    public boolean equals(getMultiSources_args that) {
      if (that == null)
        return false;

      boolean this_present_sourceIdList = true && this.isSetSourceIdList();
      boolean that_present_sourceIdList = true && that.isSetSourceIdList();
      if (this_present_sourceIdList || that_present_sourceIdList) {
        if (!(this_present_sourceIdList && that_present_sourceIdList))
          return false;
        if (!this.sourceIdList.equals(that.sourceIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sourceIdList = true && (isSetSourceIdList());
      list.add(present_sourceIdList);
      if (present_sourceIdList)
        list.add(sourceIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiSources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSourceIdList()).compareTo(other.isSetSourceIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceIdList, other.sourceIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiSources_args(");
      boolean first = true;

      sb.append("sourceIdList:");
      if (this.sourceIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiSources_argsStandardSchemeFactory implements SchemeFactory {
      public getMultiSources_argsStandardScheme getScheme() {
        return new getMultiSources_argsStandardScheme();
      }
    }

    private static class getMultiSources_argsStandardScheme extends StandardScheme<getMultiSources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiSources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SOURCE_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.sourceIdList = new ArrayList<Integer>(_list48.size);
                  int _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = iprot.readI32();
                    struct.sourceIdList.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSourceIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiSources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sourceIdList != null) {
          oprot.writeFieldBegin(SOURCE_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sourceIdList.size()));
            for (int _iter51 : struct.sourceIdList)
            {
              oprot.writeI32(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiSources_argsTupleSchemeFactory implements SchemeFactory {
      public getMultiSources_argsTupleScheme getScheme() {
        return new getMultiSources_argsTupleScheme();
      }
    }

    private static class getMultiSources_argsTupleScheme extends TupleScheme<getMultiSources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSourceIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSourceIdList()) {
          {
            oprot.writeI32(struct.sourceIdList.size());
            for (int _iter52 : struct.sourceIdList)
            {
              oprot.writeI32(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiSources_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.sourceIdList = new ArrayList<Integer>(_list53.size);
            int _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readI32();
              struct.sourceIdList.add(_elem54);
            }
          }
          struct.setSourceIdListIsSet(true);
        }
      }
    }

  }

  public static class getMultiSources_result implements org.apache.thrift.TBase<getMultiSources_result, getMultiSources_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiSources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiSources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiSources_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiSources_resultTupleSchemeFactory());
    }

    public MultiSourceResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiSourceResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiSources_result.class, metaDataMap);
    }

    public getMultiSources_result() {
    }

    public getMultiSources_result(
      MultiSourceResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiSources_result(getMultiSources_result other) {
      if (other.isSetSuccess()) {
        this.success = new MultiSourceResult(other.success);
      }
    }

    public getMultiSources_result deepCopy() {
      return new getMultiSources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MultiSourceResult getSuccess() {
      return this.success;
    }

    public getMultiSources_result setSuccess(MultiSourceResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MultiSourceResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiSources_result)
        return this.equals((getMultiSources_result)that);
      return false;
    }

    public boolean equals(getMultiSources_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiSources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiSources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiSources_resultStandardSchemeFactory implements SchemeFactory {
      public getMultiSources_resultStandardScheme getScheme() {
        return new getMultiSources_resultStandardScheme();
      }
    }

    private static class getMultiSources_resultStandardScheme extends StandardScheme<getMultiSources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiSources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MultiSourceResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiSources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiSources_resultTupleSchemeFactory implements SchemeFactory {
      public getMultiSources_resultTupleScheme getScheme() {
        return new getMultiSources_resultTupleScheme();
      }
    }

    private static class getMultiSources_resultTupleScheme extends TupleScheme<getMultiSources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiSources_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MultiSourceResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMultiAttributes_args implements org.apache.thrift.TBase<getMultiAttributes_args, getMultiAttributes_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiAttributes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiAttributes_args");

    private static final org.apache.thrift.protocol.TField ATTR_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("attrIdList", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiAttributes_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiAttributes_argsTupleSchemeFactory());
    }

    public List<Integer> attrIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ATTR_ID_LIST((short)1, "attrIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ATTR_ID_LIST
            return ATTR_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ATTR_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("attrIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiAttributes_args.class, metaDataMap);
    }

    public getMultiAttributes_args() {
    }

    public getMultiAttributes_args(
      List<Integer> attrIdList)
    {
      this();
      this.attrIdList = attrIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiAttributes_args(getMultiAttributes_args other) {
      if (other.isSetAttrIdList()) {
        List<Integer> __this__attrIdList = new ArrayList<Integer>(other.attrIdList);
        this.attrIdList = __this__attrIdList;
      }
    }

    public getMultiAttributes_args deepCopy() {
      return new getMultiAttributes_args(this);
    }

    @Override
    public void clear() {
      this.attrIdList = null;
    }

    public int getAttrIdListSize() {
      return (this.attrIdList == null) ? 0 : this.attrIdList.size();
    }

    public java.util.Iterator<Integer> getAttrIdListIterator() {
      return (this.attrIdList == null) ? null : this.attrIdList.iterator();
    }

    public void addToAttrIdList(int elem) {
      if (this.attrIdList == null) {
        this.attrIdList = new ArrayList<Integer>();
      }
      this.attrIdList.add(elem);
    }

    public List<Integer> getAttrIdList() {
      return this.attrIdList;
    }

    public getMultiAttributes_args setAttrIdList(List<Integer> attrIdList) {
      this.attrIdList = attrIdList;
      return this;
    }

    public void unsetAttrIdList() {
      this.attrIdList = null;
    }

    /** Returns true if field attrIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrIdList() {
      return this.attrIdList != null;
    }

    public void setAttrIdListIsSet(boolean value) {
      if (!value) {
        this.attrIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ATTR_ID_LIST:
        if (value == null) {
          unsetAttrIdList();
        } else {
          setAttrIdList((List<Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ATTR_ID_LIST:
        return getAttrIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ATTR_ID_LIST:
        return isSetAttrIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiAttributes_args)
        return this.equals((getMultiAttributes_args)that);
      return false;
    }

    public boolean equals(getMultiAttributes_args that) {
      if (that == null)
        return false;

      boolean this_present_attrIdList = true && this.isSetAttrIdList();
      boolean that_present_attrIdList = true && that.isSetAttrIdList();
      if (this_present_attrIdList || that_present_attrIdList) {
        if (!(this_present_attrIdList && that_present_attrIdList))
          return false;
        if (!this.attrIdList.equals(that.attrIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_attrIdList = true && (isSetAttrIdList());
      list.add(present_attrIdList);
      if (present_attrIdList)
        list.add(attrIdList);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiAttributes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAttrIdList()).compareTo(other.isSetAttrIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrIdList, other.attrIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiAttributes_args(");
      boolean first = true;

      sb.append("attrIdList:");
      if (this.attrIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.attrIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiAttributes_argsStandardSchemeFactory implements SchemeFactory {
      public getMultiAttributes_argsStandardScheme getScheme() {
        return new getMultiAttributes_argsStandardScheme();
      }
    }

    private static class getMultiAttributes_argsStandardScheme extends StandardScheme<getMultiAttributes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiAttributes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ATTR_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.attrIdList = new ArrayList<Integer>(_list56.size);
                  int _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI32();
                    struct.attrIdList.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setAttrIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiAttributes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.attrIdList != null) {
          oprot.writeFieldBegin(ATTR_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.attrIdList.size()));
            for (int _iter59 : struct.attrIdList)
            {
              oprot.writeI32(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiAttributes_argsTupleSchemeFactory implements SchemeFactory {
      public getMultiAttributes_argsTupleScheme getScheme() {
        return new getMultiAttributes_argsTupleScheme();
      }
    }

    private static class getMultiAttributes_argsTupleScheme extends TupleScheme<getMultiAttributes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiAttributes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAttrIdList()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAttrIdList()) {
          {
            oprot.writeI32(struct.attrIdList.size());
            for (int _iter60 : struct.attrIdList)
            {
              oprot.writeI32(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiAttributes_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.attrIdList = new ArrayList<Integer>(_list61.size);
            int _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readI32();
              struct.attrIdList.add(_elem62);
            }
          }
          struct.setAttrIdListIsSet(true);
        }
      }
    }

  }

  public static class getMultiAttributes_result implements org.apache.thrift.TBase<getMultiAttributes_result, getMultiAttributes_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiAttributes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiAttributes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMultiAttributes_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMultiAttributes_resultTupleSchemeFactory());
    }

    public MultiAttributeResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MultiAttributeResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiAttributes_result.class, metaDataMap);
    }

    public getMultiAttributes_result() {
    }

    public getMultiAttributes_result(
      MultiAttributeResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiAttributes_result(getMultiAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = new MultiAttributeResult(other.success);
      }
    }

    public getMultiAttributes_result deepCopy() {
      return new getMultiAttributes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MultiAttributeResult getSuccess() {
      return this.success;
    }

    public getMultiAttributes_result setSuccess(MultiAttributeResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MultiAttributeResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiAttributes_result)
        return this.equals((getMultiAttributes_result)that);
      return false;
    }

    public boolean equals(getMultiAttributes_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMultiAttributes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMultiAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiAttributes_resultStandardSchemeFactory implements SchemeFactory {
      public getMultiAttributes_resultStandardScheme getScheme() {
        return new getMultiAttributes_resultStandardScheme();
      }
    }

    private static class getMultiAttributes_resultStandardScheme extends StandardScheme<getMultiAttributes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiAttributes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MultiAttributeResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiAttributes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiAttributes_resultTupleSchemeFactory implements SchemeFactory {
      public getMultiAttributes_resultTupleScheme getScheme() {
        return new getMultiAttributes_resultTupleScheme();
      }
    }

    private static class getMultiAttributes_resultTupleScheme extends TupleScheme<getMultiAttributes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiAttributes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiAttributes_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MultiAttributeResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
