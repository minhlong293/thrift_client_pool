/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package longhm.dal.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-24")
public class ProfileAttribute implements org.apache.thrift.TBase<ProfileAttribute, ProfileAttribute._Fields>, java.io.Serializable, Cloneable, Comparable<ProfileAttribute> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProfileAttribute");

  private static final org.apache.thrift.protocol.TField VISITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("visitorId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("attributes", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProfileAttributeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProfileAttributeTupleSchemeFactory());
  }

  public String visitorId; // required
  public Map<Integer,ByteBuffer> attributes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VISITOR_ID((short)1, "visitorId"),
    ATTRIBUTES((short)2, "attributes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VISITOR_ID
          return VISITOR_ID;
        case 2: // ATTRIBUTES
          return ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VISITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("visitorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("attributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProfileAttribute.class, metaDataMap);
  }

  public ProfileAttribute() {
  }

  public ProfileAttribute(
    String visitorId,
    Map<Integer,ByteBuffer> attributes)
  {
    this();
    this.visitorId = visitorId;
    this.attributes = attributes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProfileAttribute(ProfileAttribute other) {
    if (other.isSetVisitorId()) {
      this.visitorId = other.visitorId;
    }
    if (other.isSetAttributes()) {
      Map<Integer,ByteBuffer> __this__attributes = new HashMap<Integer,ByteBuffer>(other.attributes);
      this.attributes = __this__attributes;
    }
  }

  public ProfileAttribute deepCopy() {
    return new ProfileAttribute(this);
  }

  @Override
  public void clear() {
    this.visitorId = null;
    this.attributes = null;
  }

  public String getVisitorId() {
    return this.visitorId;
  }

  public ProfileAttribute setVisitorId(String visitorId) {
    this.visitorId = visitorId;
    return this;
  }

  public void unsetVisitorId() {
    this.visitorId = null;
  }

  /** Returns true if field visitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitorId() {
    return this.visitorId != null;
  }

  public void setVisitorIdIsSet(boolean value) {
    if (!value) {
      this.visitorId = null;
    }
  }

  public int getAttributesSize() {
    return (this.attributes == null) ? 0 : this.attributes.size();
  }

  public void putToAttributes(int key, ByteBuffer val) {
    if (this.attributes == null) {
      this.attributes = new HashMap<Integer,ByteBuffer>();
    }
    this.attributes.put(key, val);
  }

  public Map<Integer,ByteBuffer> getAttributes() {
    return this.attributes;
  }

  public ProfileAttribute setAttributes(Map<Integer,ByteBuffer> attributes) {
    this.attributes = attributes;
    return this;
  }

  public void unsetAttributes() {
    this.attributes = null;
  }

  /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
  public boolean isSetAttributes() {
    return this.attributes != null;
  }

  public void setAttributesIsSet(boolean value) {
    if (!value) {
      this.attributes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VISITOR_ID:
      if (value == null) {
        unsetVisitorId();
      } else {
        setVisitorId((String)value);
      }
      break;

    case ATTRIBUTES:
      if (value == null) {
        unsetAttributes();
      } else {
        setAttributes((Map<Integer,ByteBuffer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VISITOR_ID:
      return getVisitorId();

    case ATTRIBUTES:
      return getAttributes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VISITOR_ID:
      return isSetVisitorId();
    case ATTRIBUTES:
      return isSetAttributes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProfileAttribute)
      return this.equals((ProfileAttribute)that);
    return false;
  }

  public boolean equals(ProfileAttribute that) {
    if (that == null)
      return false;

    boolean this_present_visitorId = true && this.isSetVisitorId();
    boolean that_present_visitorId = true && that.isSetVisitorId();
    if (this_present_visitorId || that_present_visitorId) {
      if (!(this_present_visitorId && that_present_visitorId))
        return false;
      if (!this.visitorId.equals(that.visitorId))
        return false;
    }

    boolean this_present_attributes = true && this.isSetAttributes();
    boolean that_present_attributes = true && that.isSetAttributes();
    if (this_present_attributes || that_present_attributes) {
      if (!(this_present_attributes && that_present_attributes))
        return false;
      if (!this.attributes.equals(that.attributes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_visitorId = true && (isSetVisitorId());
    list.add(present_visitorId);
    if (present_visitorId)
      list.add(visitorId);

    boolean present_attributes = true && (isSetAttributes());
    list.add(present_attributes);
    if (present_attributes)
      list.add(attributes);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProfileAttribute other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVisitorId()).compareTo(other.isSetVisitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitorId, other.visitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttributes()).compareTo(other.isSetAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributes, other.attributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProfileAttribute(");
    boolean first = true;

    sb.append("visitorId:");
    if (this.visitorId == null) {
      sb.append("null");
    } else {
      sb.append(this.visitorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attributes:");
    if (this.attributes == null) {
      sb.append("null");
    } else {
      sb.append(this.attributes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProfileAttributeStandardSchemeFactory implements SchemeFactory {
    public ProfileAttributeStandardScheme getScheme() {
      return new ProfileAttributeStandardScheme();
    }
  }

  private static class ProfileAttributeStandardScheme extends StandardScheme<ProfileAttribute> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProfileAttribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VISITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.visitorId = iprot.readString();
              struct.setVisitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.attributes = new HashMap<Integer,ByteBuffer>(2*_map10.size);
                int _key11;
                ByteBuffer _val12;
                for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                {
                  _key11 = iprot.readI32();
                  _val12 = iprot.readBinary();
                  struct.attributes.put(_key11, _val12);
                }
                iprot.readMapEnd();
              }
              struct.setAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProfileAttribute struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.visitorId != null) {
        oprot.writeFieldBegin(VISITOR_ID_FIELD_DESC);
        oprot.writeString(struct.visitorId);
        oprot.writeFieldEnd();
      }
      if (struct.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.attributes.size()));
          for (Map.Entry<Integer, ByteBuffer> _iter14 : struct.attributes.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            oprot.writeBinary(_iter14.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProfileAttributeTupleSchemeFactory implements SchemeFactory {
    public ProfileAttributeTupleScheme getScheme() {
      return new ProfileAttributeTupleScheme();
    }
  }

  private static class ProfileAttributeTupleScheme extends TupleScheme<ProfileAttribute> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProfileAttribute struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVisitorId()) {
        optionals.set(0);
      }
      if (struct.isSetAttributes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVisitorId()) {
        oprot.writeString(struct.visitorId);
      }
      if (struct.isSetAttributes()) {
        {
          oprot.writeI32(struct.attributes.size());
          for (Map.Entry<Integer, ByteBuffer> _iter15 : struct.attributes.entrySet())
          {
            oprot.writeI32(_iter15.getKey());
            oprot.writeBinary(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProfileAttribute struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.visitorId = iprot.readString();
        struct.setVisitorIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attributes = new HashMap<Integer,ByteBuffer>(2*_map16.size);
          int _key17;
          ByteBuffer _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readI32();
            _val18 = iprot.readBinary();
            struct.attributes.put(_key17, _val18);
          }
        }
        struct.setAttributesIsSet(true);
      }
    }
  }

}

